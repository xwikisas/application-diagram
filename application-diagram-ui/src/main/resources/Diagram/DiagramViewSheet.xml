<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="Diagram.DiagramViewSheet" locale="">
  <web>Diagram</web>
  <name>DiagramViewSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1493741256000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1547804939000</date>
  <contentUpdateDate>1547804939000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set ($diagramObj = $doc.getObject('Diagram.DiagramClass'))
#if ($diagramObj || "$!request.source" != '')
  #set ($discard = $xwiki.ssx.use('Diagram.DiagramSheet'))
  #set ($discard = $xwiki.jsx.use('Diagram.DiagramViewSheet'))
  #set ($toolbar = 'zoom layers pages lightbox')
  #if ("$!request.source" == '' &amp;&amp; $services.security.authorization.hasAccess('edit'))
    #set ($toolbar = "edit $toolbar")
  #end
  {{html clean="false"}}
  ## Check if the query contains the parameter for getting the diagram from URL.
  &lt;div class="diagram"
    data-diagram-config="$escapetool.xml($jsontool.serialize($diagramConfig))"
    data-toolbar="$escapetool.xml($toolbar)"
    #if ("$!request.source" == '')
      data-model="$escapetool.xml($tdoc.content)"
      data-reference="$escapetool.xml($services.model.serialize($tdoc.documentReference, 'default'))"
      data-title="$escapetool.xml($tdoc.plainTitle)"
    #end
  &gt;
    ## Show a preview of the diagram until the diagram viewer is loaded. This is also useful for export and WYSIWYG edit
    ## mode where the JavaScript code is not executed and thus the diagram viewer is never loaded.
    #set ($fileName = 'diagram.svg')
    #set ($pngFileName = 'diagram.png')
    #if ($xcontext.action == 'export' &amp;&amp; $diagramObj.getValue('exportUsingSVG') == 0
        &amp;&amp; $doc.getAttachment($pngFileName))
      #set ($fileName = $pngFileName)
    #end
    #set ($diagramURL = $doc.getAttachmentURL($fileName, 'download', "v=$!doc.version"))
    &lt;img src="$diagramURL" alt="$escapetool.xml($doc.plainTitle)" /&gt;
  &lt;/div&gt;
  {{/html}}
#end
{{/velocity}}</content>
  <object>
    <name>Diagram.DiagramViewSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ced6f500-a89d-4048-aa9a-3eeedadad4fc</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('diagram-viewer', [
  'jquery',
  'diagram-utils',
  'diagram-link-handler',
  'diagram-graph-xml-filter',
  'draw.io.viewer'
], function($, diagramUtils, diagramLinkHandler) {
  var getOrigin = function() {
    var origin = window.location.origin;
    if (!origin) {
      var href = window.location.href;
      var hostStart = href.indexOf('://') + 3;
      var pathStart = href.indexOf('/', hostStart);
      origin = pathStart &lt; 0 ? (href + '/') : href.substring(0, pathStart + 1);
    } else {
      origin += '/';
    }
    return origin;
  };

  // This is required for the clipart images.
  GraphViewer.prototype.imageBaseUrl = getOrigin();

  // Fix the diagram printing from the lightbox. mxPrintPreview#addGraphFragment optimizes the diagram rendering when
  // previewing the print by rendering only the shapes that intersect the clip associated with the print page. The
  // computations are wrong in view mode (either when computing the bounding rect of the shapes or the clip of the print
  // page) and it's not easy to spot the problem unfortunately. The consequence is that the print is empty. Disabling
  // the clipping fixes the issue apparently, but we loose the optimization which may cause problems for large diagrams.
  // Note that starting with version 3.9.9 of mxGraph the mxPrintPreview#addGraphFragment function doesn't skip the
  // shapes that don't interset the clip anymore because the return line has been commented out.
  // See https://github.com/jgraph/mxgraph/commit/d5c1345ec946b9d55a9c2a8c1c5df0f154561edf
  mxPrintPreview.prototype.clipping = false;

  // Overwrite in order to fix: Links with heterogeneous inner styles are not entirely clickable #107
  var graphLabelLinkClicked = Graph.prototype.labelLinkClicked;
  Graph.prototype.labelLinkClicked = function() {
    var newArguments = arguments;
    var link = arguments[1];
    var href = link.getAttribute('href');
    var originalLinkPolicy = this.linkPolicy;
    if (diagramLinkHandler.isXWikiCustomLink(href)) {
      newArguments = Array.prototype.slice.apply(arguments);
      newArguments[1] = $('&lt;a/&gt;').attr('href', diagramLinkHandler.getURLFromCustomLink(href))[0];
      // Behave as if the link is clicked directly.
      this.linkPolicy = 'blank';
    }
    try {
      graphLabelLinkClicked.apply(this, newArguments);
    } catch (e) {
      // Restore the link policy.
      this.linkPolicy = originalLinkPolicy;
    }
  };
  // Overwrite in order to fix the same issue but when clicking the links from the light box.
  var graphAddClickHandler = Graph.prototype.addClickHandler;
  Graph.prototype.addClickHandler = function() {
    var originalBeforeClick = arguments[1];
    var newArguments = Array.prototype.slice.apply(arguments);
    if (typeof originalBeforeClick === 'function') {
      var newBeforeClick = function(event, href) {
        if (href == null) {
          href = $(mxEvent.getSource(event)).closest('a').attr('href');
        }
        originalBeforeClick.call(this, event, href);
      };
      newArguments[1] = newBeforeClick;
    }
    graphAddClickHandler.apply(this, newArguments);
  };

  var getDiagramViewerConfig = function(diagramContainer) {
    var config = {
      title: diagramContainer.data('title'),
      lightbox: false,
      toolbar: 'zoom layers pages lightbox',
      'toolbar-buttons': {
        edit: {
          title: mxResources.get('edit'),
          image: Editor.editImage
        }
      }
    };
    if (diagramContainer.data('reference')) {
      config.toolbar = 'edit ' + config.toolbar;
      var diagramReference = XWiki.Model.resolve(diagramContainer.data('reference'), XWiki.EntityType.DOCUMENT);
      config.reference = diagramReference;
      var diagramEditURL = new XWiki.Document(diagramReference).getURL('edit');
      config['toolbar-buttons'].edit.handler = function() {
        window.location.href = diagramEditURL;
      };
    }
    var toolbar = diagramContainer.data('toolbar');
    if (toolbar === 'false') {
      delete config.toolbar;
    } else if (typeof toolbar === 'string') {
      config.toolbar = toolbar;
    }
    return config;
  };

  // Fix position of a dialog at the top of the window.
  Dialog.prototype.fixDialogPosition = function() {
    this.container.style.top = '0px';
    this.container.style.position = 'fixed';
  };

  // If a diagram is inserted in a page with a lot of content before it, then PrintDialog won't be visible, since the
  // top of the dialog is computed to consider a page that only holds the diagram.
  var originalShowDialog = EditorUi.prototype.showDialog;
  EditorUi.prototype.showDialog = function(elt, w, h, modal, closable, onClose, noScroll, transparent, onResize,
      ignoreBgClick) {
    originalShowDialog.apply(this, arguments);
    var dialog = this.dialog;
    if ($(dialog.container).find("input[name='printZoom']")) {
      dialog.fixDialogPosition();
      var originalResizeListener = dialog.resizeListener;
      dialog.resizeListener =  mxUtils.bind(dialog, function() {
        originalResizeListener.apply(this, arguments);
        this.fixDialogPosition();
      });
      // Since the listener is already added at construction step, we need to remove it and reattach the new function.
      mxEvent.removeListener(window, 'resize', originalResizeListener);
      mxEvent.addListener(window, 'resize', dialog.resizeListener);
    }
  };

  $.fn.viewDiagram = function(configOverride) {
    return this.empty().each(function() {
      var fromStorage = false;
      var diagramXML = diagramUtils.getDiagramXMLFromURL(window.location.href);
      if (!diagramXML) {
        diagramXML = $(this).data('model') || '&lt;mxGraphModel/&gt;';
        fromStorage = true;
      }
      var diagramRootNode = mxUtils.parseXml(diagramXML).documentElement;
      diagramRootNode.fromStorage = fromStorage;
      var config = $.extend(getDiagramViewerConfig($(this)), configOverride);
      var graphViewer = new GraphViewer(this, diagramRootNode, config);
      // Make the diagram title from the tool bar a link to the diagram page.
      if (config.title &amp;&amp; config.reference) {
        var diagramViewURL = new XWiki.Document(config.reference).getURL();
        var diagramLink = $('&lt;a/&gt;').attr('href', diagramViewURL).text(config.title);
        $(graphViewer.toolbar).children().last().empty().append(diagramLink);
      }
    });
  };

  return diagramUtils.loadTranslationAndTheme().done(function(theme) {
    // Configure the default viewer theme.
    Graph.prototype.defaultThemes = Graph.prototype.defaultThemes || {};
    Graph.prototype.defaultThemes[Graph.prototype.defaultThemeName] = theme;
  });
});</code>
    </property>
    <property>
      <name>Diagram Viewer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramViewSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6d637857-609d-4122-a9b0-19b51347bcf7</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'diagram-setup': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', 'minify=$!services.debug.minify')
  },
  map: {
    'diagram-utils': {
      'mxgraph-common': 'mxgraph-viewer'
    },
    'diagram-link-handler': {
      'draw.io.common': 'draw.io.viewer'
    }
  }
});

require(['diagram-setup'], function() {
  require(['jquery', 'diagram-viewer'], function($, diagramViewerPromise) {
    diagramViewerPromise.done(function() {
      $('.diagram').viewDiagram();
    });
  });
});</code>
    </property>
    <property>
      <name>Startup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
