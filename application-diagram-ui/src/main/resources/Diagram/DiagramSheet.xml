<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="Diagram.DiagramSheet" locale="">
  <web>Diagram</web>
  <name>DiagramSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1493978161000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1547804940000</date>
  <contentUpdateDate>1547804940000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set ($diagramObj = $doc.getObject('Diagram.DiagramClass'))
#if ($diagramObj)
  #set ($diagramConfig = {
    "debug": $services.debug.minify.equals(false),
    "locale": $xcontext.locale,
    "mxGraphClientBasePath": $services.webjars.url('org.xwiki.contrib:mxgraph-client', ''),
    "mxGraphEditorBasePath": $services.webjars.url('org.xwiki.contrib:mxgraph-editor', ''),
    "drawIOBasePath": $services.webjars.url('org.xwiki.contrib:draw.io', ''),
    "exportURL": $xwiki.getDocument('Diagram.DiagramConfig').getValue('exportURL'),
    "pdfImageExportZoom": $diagramObj.getValue('pdfImageExportZoom')
  })
  #if ($xcontext.action == 'edit')
    {{include reference="Diagram.DiagramEditSheet" /}}
  #else
    {{include reference="Diagram.DiagramViewSheet" /}}
  #end
#end
{{/velocity}}</content>
  <object>
    <name>Diagram.DiagramSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ad4bd9bd-2932-40c3-a7b9-5caae1266b43</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Generic helper methods.
 */
define('xwiki-utils', ['jquery', 'xwiki-meta'], function($, xm) {
  var getAttachmentURL = function(attachment, action, queryString) {
    var docRef = xm.documentReference;
    if (typeof attachment !== 'string') {
      docRef = attachment.parent;
      attachment = attachment.name;
    }
    if (typeof queryString === 'object') {
      queryString = $.param(queryString);
    }
    var attachmentURL = new XWiki.Document(docRef).getURL(action || 'download') +
      (docRef.name == 'WebHome' ? docRef.name : '') + '/' + attachment +
      (queryString ? '?' + queryString : '');
    return attachmentURL;
  };

  var uploadAttachment = function(blob, attachment) {
    var documentReference = xm.documentReference;
    if (typeof attachment !== 'string') {
      documentReference = attachment.parent;
      attachment = attachment.name;
    }
    var doc = new XWiki.Document(documentReference);
    var url = doc.getURL('upload');
    var formData = new FormData();
    formData.append('filepath', blob);
    formData.append('filename', attachment);
    formData.append('form_token', xm.form_token);
    // The default redirect adds more time for the upload and we don't need to render those pages.
    formData.append('xredirect', doc.getURL('get', 'outputSyntax=plain'));
    return $.post({
      url : url,
      data : formData,
      processData : false,
      contentType : false
    });
  };

  var deleteAttachment = function(attachmentName) {
    var attachmentURL = getAttachmentURL(attachmentName, 'delattachment', {
      'form_token': xm.form_token,
      'xredirect': XWiki.currentDocument.getURL('get', 'outputSyntax=plain')
    });
    return $.post(attachmentURL);
  };

  return {
    getAttachmentURL: getAttachmentURL,
    uploadAttachment: uploadAttachment,
    deleteAttachment: deleteAttachment
  };
});

/**
 * Diagram application configuration received from the server side.
 */
define('diagram-config', ['jquery'], function($) {
  return $('[data-diagram-config]').data('diagramConfig');
});

/**
 * Diagram application setup.
 */
define('diagram-setup', ['diagram-config'], function(diagramConfig) {
  // mxGraph client setup
  window.mxBasePath = diagramConfig.mxGraphClientBasePath;
  window.mxLanguage = diagramConfig.locale;

  // draw.io setup
  var drawIOBasePath = diagramConfig.drawIOBasePath;
  window.RESOURCES_PATH = drawIOBasePath + 'resources';
  window.RESOURCE_BASE = RESOURCES_PATH + '/dia';
  window.STENCIL_PATH = drawIOBasePath + 'stencils';
  window.IMAGE_PATH = drawIOBasePath + 'images';
  window.STYLE_PATH = CSS_PATH = drawIOBasePath + 'styles';
  window.SHAPES_PATH = drawIOBasePath + 'shapes';
  window.GRAPH_IMAGE_PATH = drawIOBasePath + 'img';
  window.TEMPLATE_PATH = drawIOBasePath + 'templates';
  // This is used by File &gt; Open Library from &gt; Browser...
  window.OPEN_FORM = drawIOBasePath + 'open.html';
  window.EXPORT_URL = diagramConfig.exportURL;
  window.PROXY_URL = new XWiki.Document('DiagramProxy', 'Diagram').getURL('get');
  window.isLocalStorage = true;

  window.urlParams = (function(params) {
    var pairs = window.location.search.substr(1).split('&amp;');
    pairs.forEach(function(pair) {
      var parts = pair.split('=', 2);
      if (parts.length === 2) {
        params[parts[0]] = decodeURIComponent(parts[1].replace(/\+/g, " "));
      }
    });
    return params;
  })({
    // Don't show the splash screen.
    'splash': '0',
    // Disable the tabbed UI.
    'pages': '0',
    // Disable the GitHub integration.
    'gh': '0',
    // Disable the GitLab integration.
    'gl': '0',
    // Disable the Dropbox integration.
    'db': '0',
    // Disable the Google Drive integration.
    'gapi': '0',
    // Disable Google Analytics.
    'analytics': '0',
    // Disable the One Drive integration.
    'od': '0',
    // Disable the Trello integration.
    'tr': '0'
  });

  // Disabling the integration with these external services is not enough because the draw.io code has hard-coded
  // references.
  window.DriveFile = window.DropboxFile = window.GitHubFile = window.OneDriveFile = window.TrelloFile = false;
  window.DriveLibrary = window.DropboxLibrary = window.GitHubLibrary = window.OneDriveLibrary = window.TrelloLibrary
    = false;

  var suffix = diagramConfig.debug ? '' : '.min';
  var mxGraphEditorBasePath = diagramConfig.mxGraphEditorBasePath;
  require.config({
    paths: {
      'base64': mxGraphEditorBasePath + 'deflate/base64.min',
      'jscolor': mxGraphEditorBasePath + 'jscolor/jscolor.min',
      'pako': mxGraphEditorBasePath + 'deflate/pako.min',
      'sanitizer': mxGraphEditorBasePath + 'sanitizer/sanitizer.min',
      'spin': drawIOBasePath + 'js/spin/spin.min',
      'jszip': drawIOBasePath + 'js/jszip/jszip.min',
      'mxgraph-init': drawIOBasePath + 'js/draw.io.init' + suffix,
      'mxgraph-client': mxBasePath + 'mxClient.bundle' + suffix,
      'mxgraph-editor': mxGraphEditorBasePath + 'mxGraphEditor' + suffix,
      'mxgraph-viewer': mxGraphEditorBasePath + 'mxGraphViewer' + suffix,
      'draw.io': drawIOBasePath + 'js/draw.io' + suffix,
      'draw.io.viewer': drawIOBasePath + 'js/draw.io.viewer' + suffix,
      'resourceSelector': new XWiki.Document('WebHome', 'Diagram.ResourceSelector').getURL('jsx', 'minify=' + !diagramConfig.debug)
    },
    shim: {
      'mxgraph-client': ['mxgraph-init'],
      'mxgraph-editor': ['mxgraph-client', 'jscolor', 'sanitizer'],
      'mxgraph-viewer': ['mxgraph-client', 'sanitizer'],
      'draw.io': ['mxgraph-editor', 'base64', 'pako-global', 'spin-global', 'jszip-global'],
      'draw.io.viewer': ['mxgraph-viewer', 'pako-global', 'spin-global'],
    }
  })

  define('pako-global', ['pako'], function(pako) {
    // draw.io expects a global variable.
    window.pako = pako;
  });

  define('spin-global', ['spin'], function(spin) {
    // draw.io expects a global variable.
    window.Spinner = spin;
  });

  define('jszip-global', ['jszip'], function(JSZip) {
    // draw.io expects a global variable.
    window.JSZip = JSZip;
  });
});

/**
 * Handles links to wiki pages (this is used by both the diagram viewer and the diagram editor).
 */
define('diagram-link-handler', ['xwiki-utils', 'draw.io.common'], function(xutils) {
  // See https://about.draw.io/interactive-diagrams-with-custom-links-and-actions/
  // See https://desk.draw.io/support/solutions/articles/16000080137
  // See https://jgraph.github.io/drawio-tools/tools/link.html
  var xwikiCustomLinkPrefix = 'data:xwiki/reference,';
  var isXWikiCustomLink = function(href) {
    return typeof href === 'string' &amp;&amp; href.substring(0, xwikiCustomLinkPrefix.length) === xwikiCustomLinkPrefix;
  };

  var getResourceReferenceFromCustomLink = function(href) {
    if (isXWikiCustomLink(href)) {
      var resourceReference = href.substring(xwikiCustomLinkPrefix.length);
      var typeSeparatorIndex = resourceReference.indexOf(':');
      if (typeSeparatorIndex &gt;= 0) {
        return {
          type: resourceReference.substring(0, typeSeparatorIndex),
          reference: resourceReference.substring(typeSeparatorIndex + 1)
        }
      }
    }
    if (href) {
      return {
        type: 'url',
        reference: href
      };
    }
  };

  var getCustomLinkFromResourceReference = function(resourceReference) {
    if (resourceReference.type === 'url') {
      return resourceReference.reference || '';
    } else if (resourceReference.type) {
      return xwikiCustomLinkPrefix + resourceReference.type + ':' + (resourceReference.reference || '');
    } else {
      // An empty link usually means that the link should be removed.
      return '';
    }
  };

  var getURLFromResourceReference = function(resourceReference) {
    switch (resourceReference.type) {
      case 'doc':
        let documentReference = XWiki.Model.resolve(resourceReference.reference, XWiki.EntityType.DOCUMENT,
          XWiki.currentDocument.documentReference);
        return new XWiki.Document(documentReference).getURL();
      case 'attach':
        let attachmentReference = XWiki.Model.resolve(resourceReference.reference, XWiki.EntityType.ATTACHMENT,
          XWiki.currentDocument.documentReference);
        return xutils.getAttachmentURL(attachmentReference);
      default:
        return resourceReference.reference;
    }
  };

  var getURLFromCustomLink = function(href) {
    let resourceReference = getResourceReferenceFromCustomLink(href);
    return getURLFromResourceReference(resourceReference);
  };

  var originalHandleCustomLink = Graph.prototype.handleCustomLink;
  Graph.prototype.handleCustomLink = function(href) {
    let actualHref = href;
    if (isXWikiCustomLink(href)) {
      actualHref = 'data:action/json,' + JSON.stringify({'actions': [{'open': getURLFromCustomLink(href)}]});
    }
    return originalHandleCustomLink.call(this, actualHref);
  };

  var originalGetLinkTitle = EditorUi.prototype.getLinkTitle;
  EditorUi.prototype.getLinkTitle = function(href) {
    if (isXWikiCustomLink(href)) {
      let resourceReference = getResourceReferenceFromCustomLink(href);
      return resourceReference.type + ':' + resourceReference.reference;
    } else {
      return originalGetLinkTitle.apply(this, arguments);
    }
  };

  var getFragmentIdentifierFromURL = function(url) {
    if (typeof url === 'string' &amp;&amp; url.substring(0, 5) !== 'data:') {
      fragmentIdentifierPosition = url.indexOf('#');
      if (fragmentIdentifierPosition &gt;= 0) {
        var fragmentIdentifier = url.substring(fragmentIdentifierPosition + 1);
        try {
          return decodeURIComponent(fragmentIdentifier);
        } catch (e) {
          // Malformed URI sequence. Return the fragment identifier as is.
          return fragmentIdentifier;
        }
      }
    }
  };

  var getCustomLinkFromURL = function(url) {
    if (isXWikiCustomLink(url)) {
      return url;
    } else {
      var fragmentIdentifier = getFragmentIdentifierFromURL(url);
      if (isXWikiCustomLink(fragmentIdentifier)) {
        return fragmentIdentifier;
      }
    }
  };

  return {
    isXWikiCustomLink: isXWikiCustomLink,
    getResourceReferenceFromCustomLink: getResourceReferenceFromCustomLink,
    getCustomLinkFromResourceReference: getCustomLinkFromResourceReference,
    getCustomLinkFromURL: getCustomLinkFromURL,
    getURLFromCustomLink: getURLFromCustomLink,
    getURLFromResourceReference: getURLFromResourceReference
  };
});

/**
 * Filters the Graph XML when:
 * &lt;ul&gt;
 *   &lt;li&gt;
 *     the XML is &lt;b&gt;loaded&lt;/b&gt; from the XWiki database
 *     &lt;ul&gt;
 *       &lt;li&gt;convert the draw.io WAR paths to draw.io WebJar paths (e.g. include the draw.io version)&lt;/li&gt;
 *       &lt;li&gt;replace the attachment reference from the image source with the attachment URL&lt;/li&gt;
 *     &lt;/ul&gt;
 *   &lt;/li&gt;
 *   &lt;li&gt;
 *     the XML is &lt;b&gt;saved&lt;/b&gt; to the XWiki database
 *     &lt;ul&gt;
 *       &lt;li&gt;convert the draw.io WebJar paths to draw.io WAR paths (e.g. remove the draw.io version)&lt;/li&gt;
 *       &lt;li&gt;internal links should be saved using the entity reference instead of the entity URL&lt;/li&gt;
 *       &lt;li&gt;internal images should be saved using the attachment reference instead of the attachment URL&lt;/li&gt;
 *     &lt;/ul&gt;
 *   &lt;/li&gt;
 *   &lt;li&gt;
 *     the XML is &lt;b&gt;imported&lt;/b&gt; from an external source
 *     &lt;ul&gt;
 *       &lt;li&gt;convert the draw.io WAR paths to draw.io WebJar paths (e.g. include the draw.io version)&lt;/li&gt;
 *       &lt;li&gt;replace absolute URLs with internal custom links, if the target entity reference is indicated&lt;/li&gt;
 *     &lt;/ul&gt;
 *   &lt;/li&gt;
 *   &lt;li&gt;
 *     the XML is &lt;b&gt;exported&lt;/b&gt; to an external source
 *     &lt;ul&gt;
 *       &lt;li&gt;convert the draw.io WebJar paths to draw.io WAR paths (e.g. remove the draw.io version)&lt;/li&gt;
 *       &lt;li&gt;convert attached images to data URI (but keep some metadata to idicate the attachment reference)&lt;/li&gt;
 *       &lt;li&gt;replace custom internal links with absolute URLs (but keep some metadata to indicate the entity reference)&lt;/li&gt;
 *     &lt;/ul&gt;
 *   &lt;/li&gt;
 * &lt;/ul&gt;
 */
define('diagram-graph-xml-filter', ['jquery', 'diagram-config', 'diagram-link-handler'], function($, diagramConfig, diagramLinkHandler) {
  var originalGetGraphXml = Editor.prototype.getGraphXml;
  Editor.prototype.getGraphXml = function(ignoreSelection, forStorage) {
    var node = originalGetGraphXml.apply(this, arguments);
    var filterImage = forStorage === true ? onSaveImage : onExportImage;
    var filterLink = forStorage === true ? onSaveLink : onExportLink;
    var filterBackgroundImage = forStorage === true ? onSaveBackgroundImage : onExportBackgroundImage;
    filter(this.graph, node, filterImage, filterLink, filterBackgroundImage);
    return node;
  };

  var originalSetGraphXml = Editor.prototype.setGraphXml;
  Editor.prototype.setGraphXml = function(node) {
    var filterImage = node.fromStorage === true ? onLoadImage : onImportImage;
    var filterLink = node.fromStorage === true ? onLoadLink : onImportLink;
    var filterBackgroundImage = node.forStorage === true ? onLoadBackgroundImage : onImportBackgroundImage;
    filter(this.graph, node, filterImage, filterLink, filterBackgroundImage);
    originalSetGraphXml.call(this, node);
  };

  var originalImportGraphModel = Graph.prototype.importGraphModel;
  Graph.prototype.importGraphModel = function(node, dx, dy, crop) {
    filter(this, node, onImportImage, onImportLink, onImportBackgroundImage);
    originalImportGraphModel.call(this, node, dx, dy, crop);
  };

  var filter = function(graph, node, filterImage, filterLink, filterBackgroundImage) {
    findImageNodes(node).each(function() {
      filterImage(this, graph);
    });
    findLinkNodes(node).each(function() {
      filterLink(this, graph);
    });
    filterBackgroundImage(node);
  };

  var findImageNodes = function(node) {
    return $(node).find('mxCell[style^="image;"], mxCell[style^="shape=image;"]');
  };

  var findLinkNodes = function(node) {
    return $(node).find('UserObject[link], mxCell[value*="\\&lt;a href"]');
  };

  // Convert the draw.io WebJar paths to draw.io WAR paths (e.g. remove the draw.io version from the path).
  // Internal images should be saved using the attachment reference instead of the attachment URL.
  var drawIOBasePath = diagramConfig.drawIOBasePath;
  var onSaveImage = function(node, graph) {
    var style = $(node).attr('style') || '';
    var styleObject = graph.stylesheet.getCellStyle(style, {});
    var oldSource = styleObject.image || '';
    var newSource = oldSource;
    if (oldSource.substring(0, drawIOBasePath.length) === drawIOBasePath) {
      // Convert draw.io WebJar URL to draw.io WAR path.
      // See https://github.com/xwikisas/application-diagram/issues/11
      newSource = oldSource.substring(drawIOBasePath.length);
    } else {
      var customLink = diagramLinkHandler.getCustomLinkFromURL(oldSource);
      if (customLink) {
        // Save the XWiki attachment reference instead of the attachment URL.
        // We have to encode the value in order to avoid breaking the style string.
        newSource = encodeURIComponent(customLink);
      }
    }
    if (newSource !== oldSource) {
      $(node).attr('style', style.replace(oldSource, newSource));
    }
  };

  // Convert the draw.io WAR paths to draw.io WebJar paths (e.g. include the draw.io version in the path).
  // Replace the attachment reference from the image source with the attachment URL.
  var onLoadImage = function(node, graph) {
    var style = $(node).attr('style') || '';
    var styleObject = graph.stylesheet.getCellStyle(style, {});
    var oldSource = styleObject.image || '';
    var newSource = oldSource;
    if (oldSource.substring(0, 4) === 'img/') {
      // Convert draw.io WAR path to draw.io WebJar URL.
      // See https://github.com/xwikisas/application-diagram/issues/11
      newSource = drawIOBasePath + oldSource;
    } else {
      try {
        var decodedOldSource = decodeURIComponent(oldSource);
        if (diagramLinkHandler.isXWikiCustomLink(decodedOldSource)) {
          // Replace the attachment reference from the image source with the attachment URL, but keep the attachment
          // reference in the fragment identifier in order to be able to restore it on save.
          newSource = diagramLinkHandler.getURLFromCustomLink(decodedOldSource) + '#' + oldSource;
        }
      } catch (e) {
        // Ignore.
      }
    }
    if (newSource !== oldSource) {
      $(node).attr('style', style.replace(oldSource, newSource));
    }
  };

  // Convert the draw.io WebJar paths to draw.io WAR paths (e.g. remove the draw.io version).
  // Convert attached images to data URI (but keep some metadata to idicate the attachment reference).
  var onExportImage = function(node, graph) {
    var style = $(node).attr('style') || '';
    var styleObject = graph.stylesheet.getCellStyle(style, {});
    var oldSource = styleObject.image || '';
    var newSource = convertImageLink(oldSource, true);
    var customLink = diagramLinkHandler.getCustomLinkFromURL(oldSource);
    if (customLink) {
      // For image attachments, keep some metadata to indicate the original source.
      style = mxUtils.setStyle(style, 'xwikiImage', encodeURIComponent(customLink));
    }
    if (newSource !== oldSource) {
      $(node).attr('style', style.replace(oldSource, newSource));
    }
  };

  var onImportBackgroundImage = function(node) {
    // Do nothing.
  };

  var onSaveBackgroundImage = function(node) {
    // Do nothing.
  };

  var onLoadBackgroundImage = function(node) {
    // Do nothing.
  };

  var onExportBackgroundImage = function(node) {
    if (node.getAttribute('backgroundImage') == undefined) {
      return;
    }
    var backgroundImage = JSON.parse(node.getAttribute('backgroundImage'));
    var oldSource = backgroundImage.src;
    var newSource = convertImageLink(oldSource);
    var customLink = diagramLinkHandler.getCustomLinkFromURL(oldSource);
    if (customLink) {
      // For image attachments, keep some metadata to indicate the original source.
      backgroundImage.xwikiImage = encodeURIComponent(customLink);
    }
    if (newSource !== oldSource) {
      backgroundImage.src = newSource;
      node.setAttribute('backgroundImage', JSON.stringify(backgroundImage));
    }
  };

  var convertImageLink = function(oldSource, removeBase) {
    var newSource = oldSource;
    if (oldSource.substring(0, drawIOBasePath.length) === drawIOBasePath) {
      // Convert the draw.io WebJar paths to draw.io WAR paths (e.g. remove the draw.io version).
      newSource = oldSource.substring(drawIOBasePath.length);
    } else if (oldSource.substring(0, 5) !== 'data:') {
      // Convert other images to data URI.
      newSource = maybeConvertToDataURI(oldSource, removeBase);
    }
    return newSource;
  };

  var maybeConvertToDataURI = function(url, removeBase) {
    var image = getCachedImageByURL(url);
    if (image) {
      var canvas = document.createElement('canvas');
      var context2D = canvas.getContext('2d');
      canvas.height = image.naturalHeight;
      canvas.width = image.naturalWidth;
      context2D.drawImage(image, 0, 0);
      try {
        url = canvas.toDataURL();
        var semicolonIndex = url.indexOf(';');
        // Remove temporarily 'base64,' when the url is used in a style attribute, since a split is done by ',' afterwards.
        if (semicolonIndex &gt; 0 &amp;&amp; removeBase ) {
          url = url.substring(0, semicolonIndex) + url.substring(url.indexOf(',', semicolonIndex + 1));
        }
      } catch (e) {
        // Ignore.
      }
    }
    return url;
  };

  var diagramImages = {};
  var collectImages = function() {
    $(this.diagramContainer).find('image').each(function() {
      var absoluteURL = $(this).attr('xlink:href');
      if (diagramImages.hasOwnProperty(absoluteURL)) {
        return;
      }
      var image = diagramImages[absoluteURL] = new Image();
      image.crossOrigin = 'use-credentials';
      image.src = absoluteURL;
    });
  };
  $(document).on('diagramEditorCreated', function(event, editorUI) {
    editorUI.editor.addListener('fileLoaded', $.proxy(collectImages, editorUI));
    editorUI.editor.graph.model.addListener(mxEvent.CHANGE, $.proxy(collectImages, editorUI));
  });

  var getCachedImageByURL = function(url) {
    var absoluteURL = $('&lt;a/&gt;').attr('href', url).prop('href');
    var image = diagramImages[absoluteURL];
    if (image &amp;&amp; image.complete &amp;&amp; image.naturalWidth) {
      return image;
    }
  };

  // Convert the draw.io WAR paths to draw.io WebJar paths (e.g. include the draw.io version in the path).
  var onImportImage = function(node, graph) {
    onLoadImage(node, graph);
  };

  var onSaveLink = function(node) {
    // Nothing to do here (save the link as is).
  };

  var onLoadLink = function(node) {
    // Nothing to do here (keep the link as is).
  };

  // Replace custom internal links with absolute URLs (but keep some metadata to indicate the entity reference).
  // Consider both the cases when the node is UserObject or mxCell.
  var onExportLink = function(node) {
    var tagName = node.tagName.toLowerCase();
    var value = $(node).attr('value');
    var href = $('&lt;div&gt;&lt;/div&gt;').html(value).find('a[href]').attr('href');
    var link = tagName == 'userobject' ? $(node).attr('link') : href;
    if (diagramLinkHandler.isXWikiCustomLink(link)) {
      var url = diagramLinkHandler.getURLFromCustomLink(link);
      var absoluteURL = $('&lt;a/&gt;').attr('href', url).prop('href');
      updateLinkAttributes(node, value, link, absoluteURL);
    }
  };

  // Replace absolute URLs with internal custom links, if the target entity reference is indicated.
  var onImportLink = function(node) {
    var link = $(node).attr('data-link');
    if (diagramLinkHandler.isXWikiCustomLink(link)) {
      var value = $(node).attr('value');
      var href = $('&lt;div&gt;&lt;/div&gt;').html(value).find('a[href]').attr('href');
      updateLinkAttributes(node, value, href, link);
    }
  };

  var updateLinkAttributes = function(node, value, oldURL, newURL) {
    var attributesMap = {'data-link': null};
    if (node.tagName.toLowerCase() == 'userobject') {
      attributesMap.link = newURL;
    } else {
      attributesMap.value = value.replace(oldURL, newURL);
    }
    $(node).attr(attributesMap);
  };
});

/**
 * Utility functions used in both view and edit modes.
 */
define('diagram-utils', ['jquery', 'diagram-link-handler'], function($, diagramLinkHandler) {
  //
  // Get a XML diagram from hash.
  // The hash begins with 'R' &amp; continues with the encoded diagram.
  //
  var getDiagramXMLFromURL = function(url) {
    let hashIndex = url.indexOf('#R');
    if (hashIndex &gt; -1) {
      // Exclude first 2 letters from hash (#R).
      let hash = url.substring(hashIndex+2);
      try {
        let decodedData = decodeURIComponent(hash);
        let graph = new Graph();
        let rawDiagram = graph.decompress(decodedData);
        return rawDiagram;
      } catch (e) {
        console.error(e.stack)
      }
    }
    return null;
  };

  //
  // Load the translation file and the default theme.
  //
  var loadTranslationAndTheme = function() {
    var deferred = $.Deferred();
    mxResources.loadDefaultBundle = false;
    var bundle = mxResources.getDefaultBundle(RESOURCE_BASE, mxLanguage) ||
      mxResources.getSpecialBundle(RESOURCE_BASE, mxLanguage);
    // The theme is important because it controls how the shapes are rendered.
    mxUtils.getAll([bundle, STYLE_PATH + '/default.xml'], function(response) {
      // Adds bundle text to resources.
      mxResources.parse(response[0].getText());
      deferred.resolve(response[1].getDocumentElement());
    }, function() {
      // Failed to load the translation file or the theme.
      deferred.reject();
    });
    return deferred.promise();
  };

  //
  // Fix XWiki custom links in print preview.
  //
  var originalPrintPreviewAddGraphFragment = mxPrintPreview.prototype.addGraphFragment;
  mxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip) {
    var result = originalPrintPreviewAddGraphFragment.apply(this, arguments);
    // Convert XWiki custom links to absolute URLs.
    $(div).find('a').each(function() {
      // We have to update both SVG links and HTML links (within foreign objects).
      ['xlink:href', 'href'].forEach(function(name) {
        var value = $(this).attr(name);
        if (diagramLinkHandler.isXWikiCustomLink(value)) {
          var url = diagramLinkHandler.getURLFromCustomLink(value);
          var absoluteURL = $('&lt;a/&gt;').attr('href', url).prop('href');
          $(this).attr(name, absoluteURL);
        }
      }, this);
    });
    return result;
  };

  return {
    getDiagramXMLFromURL: getDiagramXMLFromURL,
    loadTranslationAndTheme: loadTranslationAndTheme
  };
});</code>
    </property>
    <property>
      <name>Code used in both view and edit modes</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>b73d218d-1ebd-484b-91e1-d9a9cac2ea56</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/* The diagram styles should be loaded after the skin and before our overwrites. */
@import url("$services.webjars.url('org.xwiki.contrib:draw.io', 'styles/grapheditor.css')");

/**
 * Diagram Editor and Dialogs
 */
.diagram-editor {
  height: 600px;
  min-height: 20px;
  position: relative;
}

.diagram-editor input[type="checkbox"], .diagram-editor input[type="radio"],
.mxPopupMenu input[type="checkbox"], .mxPopupMenu input[type="radio"],
.mxWindow input[type="checkbox"], .mxWindow input[type="radio"],
.geDialog input[type="checkbox"], .geDialog input[type="radio"] {
  vertical-align: text-bottom;
}

.fullScreenWrapper .buttons &gt; .buttonwrapper:first-child {
  /* Hide the "Exit Full Screen" button. We have a tool bar entry for this. */
  display: none !important;
}

/**
 * Overwrite XWiki skin styles
 */
.diagram-editor *,
.mxPopupMenu *,
.mxWindow *,
.geDialog,
.geDialog * {
  box-sizing: content-box;
}

.mxPopupMenu,
.mxWindow,
.geDialog {
  /* We need the same font size as on draw.io because the dialog height is hard-coded. */
  font-size: 10pt;
}

.diagram-editor button, .diagram-editor select,
.mxPopupMenu button, .mxPopupMenu select,
.mxWindow button, .mxWindow select,
.geDialog button, .geDialog select {
  box-sizing: border-box;
}

.diagram-editor input[type="text"],
.mxPopupMenu input[type="text"],
.mxWindow input[type="text"],
.geDialog input[type="text"] {
  font-size: inherit;
  height: auto;
  padding: 1px;
}

.diagram-editor img,
.mxPopupMenu img,
.mxWindow img,
.geDialog img {
  vertical-align: baseline;
}

.diagram-editor hr,
.mxPopupMenu hr,
.mxWindow hr,
.geDialog hr {
  margin: 0;
}

.mxPopupMenu table,
.mxWindow table,
.geDialog table {
  margin-bottom: 0;
  width: auto;
}

.diagram-editor table &gt; tbody &gt; tr &gt; td,
.mxPopupMenu table &gt; tbody &gt; tr &gt; td,
.mxWindow table &gt; tbody &gt; tr &gt; td,
.geDialog table &gt; tbody &gt; tr &gt; td {
  border-top: 0 none;
}

.geDialog table &gt; tbody &gt; tr &gt; td {
  padding: 0;
  vertical-align: baseline;
}

.geDialog h3 {
  font-size: 1.17em;
  font-weight: bold;
}

.geDialog input[type='checkbox'] {
  vertical-align: baseline;
}

.geDialog label {
  display: inline;
}

.geDialog textarea {
  padding: inherit;
}
/**
 * Diagram Viewer
 */
.diagram {
  /* Leave space for the toolbar. */
  margin-top: 30px;
}

/**
 * Diagram Macro
 */
.geDiagramContainer,
.diagram-container &gt; .thumbnail {
  max-width: 100%;
}

.diagram-container &gt; .thumbnail {
  display: inline-block;
}

.diagram-container &gt; .thumbnail .box {
  margin-bottom: 0;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>bef74954-ef73-4515-8520-f27c329a504f</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/* Overwrite the graph editor styles that affect the XWiki UI */
body.geEditor {
 font-family: @font-family-base;
 font-size: @font-size-base;
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name>LESS</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
