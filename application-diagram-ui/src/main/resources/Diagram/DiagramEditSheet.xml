<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="Diagram.DiagramEditSheet" locale="">
  <web>Diagram</web>
  <name>DiagramEditSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1493735733000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1568955700000</date>
  <contentUpdateDate>1568955700000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Diagram.ResourceSelector.WebHome" /}}

{{velocity output="false"}}
#macro (diagramLinkModal)
  &lt;div class="modal" id="diagramLinkModal" tabindex="-1" role="dialog"
      aria-labelledby="diagramLinkModal-label" data-backdrop="static" data-keyboard="false"&gt;
    &lt;div class="modal-dialog modal-lg" role="document"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
          &lt;/button&gt;
          &lt;div class="modal-title" id="diagramLinkModal-label"&gt;
            Link
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="modal-body xform"&gt;
          #resourceSelector()
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;
            $escapetool.xml($services.localization.render('cancel'))
          &lt;/button&gt;
          &lt;button type="button" class="btn btn-primary"&gt;&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}

{{velocity}}
{{html clean="false"}}
#if ($doc.getObject('Diagram.DiagramClass'))
  ## Disable the keyboard shortcuts because they prevent the user from typing text inside the diagram (the diagram
  ## editor doesn't use standard text fields for entering the labels for the various shapes the diagram is made of)
  #set ($keyboardShortcutsEnabled = false)
  #set ($discard = $xwiki.ssx.use('Diagram.DiagramSheet'))
  #set ($discard = $xwiki.jsx.use('Diagram.DiagramEditSheet'))
  &lt;div class="diagram-editor loading" data-diagram-config="$escapetool.xml($jsontool.serialize($diagramConfig))"&gt;
    &lt;input class="diagram-content" type="hidden" name="content" value="$escapetool.xml($tdoc.content)" /&gt;
  &lt;/div&gt;
  #diagramLinkModal()
#end
{{/html}}
{{/velocity}}</content>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>07b08a89-bce0-494e-89e6-efaef0cfd155</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Adds support for editing diagrams stored in XWiki pages.
 */
define('diagram-store', ['jquery', 'xwiki-meta', 'xwiki-utils', 'diagram-utils', 'draw.io', 'xwiki-events-bridge'],
    function($, xm, xutils, diagramUtils) {
  var files = [];
  window._xfiles = files;
  var createFile = function(ui, input, title, documentReference) {
    var file = new XWikiFile(ui, input, title, documentReference);
    files.push(file);
    return file;
  };

  var XWikiFile = function(ui, input, title, documentReference) {
    DrawioFile.call(this, ui);
    this.input = input;
    this.title = title;
    this.documentReference = documentReference;
  };

  mxUtils.extend(XWikiFile, DrawioFile);

  $.extend(XWikiFile.prototype, {
    getMode: function() {
      return 'xwiki';
    },
    getTitle: function() {
      return this.title;
    },
    getData: function() {
      return this.input.val();
    },
    setData: function(data) {
      this.input.val(data);
    },
    // We overwrite the base implementation because we don't want to support files that contain multiple diagrams.
    updateFileData: function() {
      this.setData(mxUtils.getPrettyXml(this.ui.editor.getGraphXml(true, true)));
    },
    open: function() {
      var graphXML = this.getData() || '&lt;mxGraphModel/&gt;';
      var graphNode = mxUtils.parseXml(graphXML).documentElement;
      graphNode.fromStorage = true;
      this.ui.editor.setGraphXml(graphNode);
      this.changeListener = mxUtils.bind(this, function(sender, eventObject) {
        this.setModified(true);
      });
      this.ui.editor.graph.model.addListener(mxEvent.CHANGE, this.changeListener);
    }
  });

  var forEachOpenedFile = function(visitor) {
    files.forEach(function(file) {
      if (file.getUi() &amp;&amp; file.getUi().getCurrentFile() === file) {
        visitor(file);
      }
    });
  };

  var updateFormFields = function(event) {
    forEachOpenedFile(function(file) {
      // This is a workaround for https://github.com/jgraph/drawio/issues/490
      // Stop editing for getting the latest content from diagram
      file.ui.editor.graph.stopEditing(false);
      file.updateFileData();
    });
  };

  var resetDirty = function() {
    forEachOpenedFile(function(file) {
      file.setModified(false);
    });
  };

  var pipeDeferred = function(left, right) {
    left.done($.proxy(right, 'resolve')).fail($.proxy(right, 'reject'));
  };

  var imageCache = {};
  var saveFileAsImageAttachment = function(file) {
    var deferred = $.Deferred();
    // This is a workaround for https://github.com/jgraph/drawio/issues/490
    // Stop editing for getting the latest content from diagram
    file.ui.editor.graph.stopEditing(false);
    var svgRoot = file.ui.editor.graph.getSvg(/* background: */ '#ffffff', /* scale: */ null, /* border: */ null,
      /* nocrop: */ true, /* crisp: */ null, /* ignoreSelection: */ true);
    // Embed the images because the PDF exporter might not be able to access them.
    file.ui.convertImages(svgRoot, function() {
      var svg = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n' +
        '&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;\n' +
        mxUtils.getXml(svgRoot);
      var blob = new Blob([svg], {type: 'image/svg+xml'});
      var attachmentReference = new XWiki.AttachmentReference('diagram.svg', file.documentReference);
      // Avoid creating too many versions of the attachment.
      xutils.deleteAttachment(attachmentReference).always(function() {
        pipeDeferred(xutils.uploadAttachment(blob, attachmentReference), deferred);
      });
    }, imageCache);
    return deferred.promise();
  };

  var saveFilesAsImageAttachments = function() {
    var uploadDeferred = $.Deferred().resolve();
    forEachOpenedFile(function(file) {
      var nextUpload = $.proxy(saveFileAsImageAttachment, null, file);
      uploadDeferred = uploadDeferred.then(nextUpload, nextUpload);
    });
    return uploadDeferred.promise();
  };

  var uploadInProgress = false;
  // Attach the diagram SVG to the diagram page in order to use it for viewing the diagram and for exporting the diagram
  // to PDF. For this we need to stop the default save until the upload action is completed and trigger it after.
  $(document).on('xwiki:actions:beforeSave', function(event, data) {
    if (!uploadInProgress) {
      uploadInProgress = true;
      event.preventDefault();
      // This is for older versions of XWiki (&lt;10.8.1) where we had to stop the original event.
      if (data &amp;&amp; data.originalEvent &amp;&amp; typeof data.originalEvent.stop === 'function') {
        data.originalEvent.stop();
      }
      var saveButton = $('input[name=action_save' + (data &amp;&amp; data['continue'] ? 'andcontinue' : '') + ']');
      saveButton.prop('disabled', true);
      saveFilesAsImageAttachments().always(function() {
        saveButton.prop('disabled', false).click();
      });
    } else {
      uploadInProgress = false;
    }
  });

  // We need to update the form fields before the form is validated (for Preview, Save and Save &amp; Continue).
  $(document).on('xwiki:actions:beforePreview xwiki:actions:beforeSave', updateFormFields);

  var submitInProgress = false;
  // Disable the leave confirmation when the form action buttons are used.
  $(document).on('xwiki:actions:cancel xwiki:actions:preview xwiki:actions:save xwiki:document:saved',
    function(event, data) {
      // We reset the dirty field on 'xwiki:actions:save' only if it's not a Save &amp; Continue. Otherwise we wait for
      // 'xwiki:document:saved' to be sure the document was saved.
      if (!data || !data['continue']) {
        submitInProgress = event.type === 'xwiki:actions:preview' || event.type === 'xwiki:actions:save';
        resetDirty();
      }
    });

  $(window).on('beforeunload', function(event) {
    // Update the form fields before the page is unloaded in order to allow the browser to cache their values
    // (Back-Forward and Soft Reload cache). The form fields have already been updated (for validation) if a submit
    // is currently in progress.
    if (!submitInProgress) {
      updateFormFields();
    } else {
      submitInProgress = false;
    }
  });

  return {
    createFile: createFile
  };
});</code>
    </property>
    <property>
      <name>Diagram Store</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a9be39c0-68be-4333-ac14-93fcee0a275b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('svg-handler', ['jquery'], function($) {
  var lineHeight = 15;
  var addTagSpecificStyle = function(element, s, w, h, htmlConverter, str, alt) {
    switch (element.tagName.toLowerCase()){
      case 'h1':
        alt.setAttribute('font-size', Math.round(s.fontSize + 0.6 * s.fontSize) + 'px');
        alt.setAttribute('font-weight', 'bold');
        break;
      case 'h2':
        alt.setAttribute('font-size', Math.round(s.fontSize + 0.3 * s.fontSize) + 'px');
        alt.setAttribute('font-weight', 'bold');
        break;
      case 'h3':
        alt.setAttribute('font-size', Math.round(s.fontSize + 0.15 * s.fontSize) + 'px');
        alt.setAttribute('font-weight', 'bold');
        break;
      case 'h4':
        alt.setAttribute('font-weight', 'bold');
        break;
      case 'h5':
        alt.setAttribute('font-size', Math.round(s.fontSize - 0.15 * s.fontSize) + 'px');
        alt.setAttribute('font-weight', 'bold');
        break;
      case 'h6':
        alt.setAttribute('font-size', Math.round(s.fontSize - 0.3 * s.fontSize) + 'px');
        alt.setAttribute('font-weight', 'bold');
        break;
      default:
        return alt;
    }
    return alt;
  };

  var getStrWidth = function(str, s) {
    return $('&lt;span&gt;&lt;/span&gt;')
      .css({display: 'none', whiteSpace: 'nowrap'})
      .appendTo($('body'))
      .text(str)
      .width();
  };

  // Creates a row inside a text element that should be wrapped. The coordinates of the first row are already saved.
  var createRow = function(w, h, rowNb) {
    var row = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
    row.setAttribute('x', w);
    row.setAttribute('y', h);
    if (rowNb &gt; 0) {
      takenCoordinates.push({'w': w, 'h': h});
    }
    return row;
  };

  var wrapText = function(alt, s, w, h, content, contentWidth, maxWidth) {
    var words = content.split(/[\s+]/);
    var wordWidth, rowWidth = 0, rowNb = 0;
    var row = createRow(w, h, rowNb);
    alt.append(row);
    words.each(function(word) {
      word += ' ';
      wordWidth = getStrWidth(word, s);
      if (rowWidth + wordWidth &gt; maxWidth) {
        h += lineHeight;
        row = createRow(w, h, ++rowNb);
        row.textContent = word;
        alt.append(row);
        rowWidth = wordWidth;
      } else {
        row.textContent += word;
        rowWidth += wordWidth;
      }
    });
  };

  var takenCoordinates = [];
  // For the current block of text take into consideration if those coordinates are already in use.
  // This is used when we are computing manually the container of children elements.
  var maybeChangeHeight = function(w, h, isChildElement) {
    if (!isChildElement) {
      return h;
    }
    var thisCoordinates = {'w': w, 'h': h};
    takenCoordinates.each(function(coordinates) {
      if (coordinates['w'] == thisCoordinates['w'] &amp;&amp; coordinates['h'] == thisCoordinates['h']) {
        h += lineHeight;
        thisCoordinates['h'] = h;
      }
    });
    takenCoordinates.push(thisCoordinates);
    return h;
  };

  // Create the basis of a svg element.
  var createSvgElement = function(s, w, h, tag, isChildElement) {
    var alt = document.createElementNS('http://www.w3.org/2000/svg', tag);
    h = maybeChangeHeight(w, h, isChildElement);
    alt.setAttribute('x', w);
    alt.setAttribute('y', h);
    alt.setAttribute('fill', s.fontColor || 'black');
    alt.setAttribute('text-anchor', 'middle');
    alt.setAttribute('font-size', Math.round(s.fontSize) + 'px');
    alt.setAttribute('font-family', s.fontFamily);

    if ((s.fontStyle &amp; mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)
    {
      alt.setAttribute('font-weight', 'bold');
    }

    if ((s.fontStyle &amp; mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)
    {
      alt.setAttribute('font-style', 'italic');
    }

    if ((s.fontStyle &amp; mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)
    {
      alt.setAttribute('text-decoration', 'underline');
    }
    return alt;
  };

  var convertTextElementToSvg = function(element, s, w, h, htmlConverter, str, rectWidth) {
    var tagName = element.tagName.toLowerCase();
    var listTags = ['ul', 'ol'];
    var isAList = listTags.includes(tagName);
    if (tagName == 'br') {
      return;
    }
    if ($(element).is(':first-child')) {
      takenCoordinates = [];
    }
    w = Math.round(w / 2);
    h = Math.round((h + s.fontSize) / 2);
    var alt = createSvgElement(s, w, h, 'text', !isAList);

    // Consider rectWidth as the container width to do the word wrap when needed. Add the inner html only if the
    // element is not a list, since the text should be distributed to children instead of being shown at once.
    // The same is applied for when the text is longer then the rectWidth, since it will be distributed to tspan elements.
    htmlConverter.innerHTML = element.innerText;
    var content = htmlConverter.value;
    var contentWidth = getStrWidth(content, s);
    if (!isAList) {
      if (contentWidth &gt; rectWidth) {
        wrapText(alt, s, w, h, content, contentWidth, rectWidth);
      } else {
        alt.textContent = htmlConverter.value;
      }
    }

    // Convert the children. Have a container that will hold the text element in case it has other children.
    if (element.childElements().length &gt; 0) {
      var container = createSvgElement(s, w, h, 'g', false);
      // TODO: Don't append alt element, unless it has a content.
      container.append(alt);
      element.childElements().each(function(child) {
        var childSvg = convertTextElementToSvg(child, s, w, h, htmlConverter, str, rectWidth);
        if (childSvg != undefined) {
          container.append(childSvg);
        }
      });
    }

    // TODO: apply the defined style of the element.
    alt = addTagSpecificStyle(element, s, w, h, htmlConverter, str, alt);
    if (element.childElements().length &gt; 0) {
      return container;
    } else {
      return alt;
    }
  };

  return {
    convertTextElementToSvg: convertTextElementToSvg,
    lineHeight: lineHeight
  };
});
/**
 * Overrides the link dialog in order to support creating links to wiki pages.
 */
define('diagram-link-editor', [
  'jquery',
  'diagram-link-handler',
  'svg-handler',
  'draw.io',
  'resourceSelector'
], function($, diagramLinkHandler, svgHandler) {
  EditorUi.prototype.showLinkDialog = function(value, selectLabel, callback) {
    var resourceReference = diagramLinkHandler.getResourceReferenceFromCustomLink(value);
    // We append the modal to the body element in order to fix Issue #108: "Inserting a link in full screen mode is not
    // possible".
    $('#diagramLinkModal').appendTo('body').selectResource(resourceReference, {
      selectLabel: selectLabel
    }).done(function(resourceReference) {
      callback(diagramLinkHandler.getCustomLinkFromResourceReference(resourceReference));
    });
  };

  // Overwrite Graph.getSvg in order to replace XWiki custom links with absolute URLs.
  // Also fix the text fallback for viewers with no support for foreignObjects.
  var originalGraphGetSVG = Graph.prototype.getSvg;
  Graph.prototype.getSvg = function(background, scale, border, nocrop, crisp, ignoreSelection, showText, imgExport,
      linkTarget, hasShadow) {
    imgExport = imgExport || this.createSvgImageExport();
    var originalGetLinkForCellState = imgExport.getLinkForCellState;
    imgExport.getLinkForCellState = function() {
      var result = originalGetLinkForCellState.apply(this, arguments);
      if (diagramLinkHandler.isXWikiCustomLink(result)) {
        result = diagramLinkHandler.getURLFromCustomLink(result);
        // Use the absolute URL because this SVG is used for PDF export which needs to be portable.
        result = $('&lt;a/&gt;').attr('href', result).prop('href');
      }
      return result;
    }
    var originalDrawState = imgExport.drawState;
    imgExport.drawState = function(state, canvas) {
      var originalCreateAlternateContent = canvas.createAlternateContent;
      canvas.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip,
          rotation) {
        if (format === 'html') {
          // Keep only the text content.
          str = $('&lt;div/&gt;').html(str).text() || this.foAltText;
        }
        // Update links inside foreignObject to use absolute URLs, since the generated SVG needs to be portable.
        $(fo).find('a').each(function() {
          var oldLink = $(this).attr('href');
          if (diagramLinkHandler.isXWikiCustomLink(oldLink)) {
            var newLink = diagramLinkHandler.getURLFromCustomLink(oldLink);
            $(this).attr('href', newLink);
          }
        });

        var previousHeight;
        if (this.foAltText != null) {
          var s = this.state;
          var htmlConverter = document.createElement('textarea');
          var content = document.createElementNS('http://www.w3.org/2000/svg', 'g');
          var elements = fo.firstElementChild.firstElementChild.childElements();
          // Take the width from parent rect, which is the last one found.
          var rectangles = $(fo.parentElement.parentElement).find('rect');
          var rectWidth = rectangles[rectangles.length - 1].width.baseVal.valueAsString;
          try {
            if (elements.length &gt; 0) {
              elements.each(function(element) {
                if (previousHeight === h) {
                  h += 2 * svgHandler.lineHeight;
                }
                previousHeight = h;
                var alt = svgHandler.convertTextElementToSvg(element, s, w, h, htmlConverter, str, rectWidth);
                content.append(alt);
              });
              return content;
            } else {
              return originalCreateAlternateContent.call(this, fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);
            }
          } catch (e) {
            return originalCreateAlternateContent.apply(this, arguments);
          }
        } else {
          return originalCreateAlternateContent.apply(this, arguments);
        }
      };
      return originalDrawState.apply(this, arguments);
    };
    try {
      return originalGraphGetSVG.call(this, background, scale, border, nocrop, crisp, ignoreSelection, showText,
        imgExport, linkTarget, hasShadow);
    } finally {
      imgExport.getLinkForCellState = originalGetLinkForCellState;
      imgExport.drawState = originalDrawState;
    }
  };
});

/**
 * Adds support for using XWiki image attachments in diagrams.
 */
define('diagram-image-editor', ['xwiki-utils', 'diagram-link-handler', 'draw.io'], function(xutils, diagramLinkHandler) {
  // Fix the base URL used when exporting the diagram as image.
  var originalCreateImageUrlConverter = EditorUi.prototype.createImageUrlConverter;
  EditorUi.prototype.createImageUrlConverter = function() {
    var converter = originalCreateImageUrlConverter.call(this);
    converter.convert = function(src) {
      // Use baseDomain instead of baseUrl to detect external URLs.
      if (src &amp;&amp; (src.substr(0, 7) === 'http://' || src.substr(0, 8) === 'https://') &amp;&amp;
          src.substr(0, converter.baseDomain.length) !== converter.baseDomain) {
        src = PROXY_URL + '?url=' + encodeURIComponent(src);
      }
      return src;
    };
    return converter;
  };

  // Override for uploading the image as attachment instead of encode it to Base64.
  var originalImportFiles = EditorUi.prototype.importFiles;
  EditorUi.prototype.importFiles = function(files, x, y, maxSize, fn, resultFn, filterFn, barrierFn, resizeDialog,
      maxBytes, resampleThreshold, ignoreEmbeddedXml) {
    let importFilesArgs = arguments;
    if (fn) {
      let editorUi = this;
      importFilesArgs = Array.prototype.slice.call(arguments);
      // This is the call back function responsible to insert the image.
      importFilesArgs[4] = function(data, mimeType, x, y, w, h, filename) {
        if (data.substring(0, 5) == 'data:') {
          let fnArgs = Array.prototype.slice.call(arguments);
          let fileBase64Data = data.substring(data.indexOf(',') + 1);
          xutils.uploadAttachment(editorUi.base64ToBlob(fileBase64Data, mimeType), filename).done(function() {
            // Include the attachment reference in the URL using the fragment identifier in order to be able to use it
            // when saving the diagram (we want to save the attachment reference not the attachment URL).
            let resourceReference = {
              type: 'attach',
              reference: XWiki.Model.serialize(new XWiki.AttachmentReference(filename))
            };
            let customLink = diagramLinkHandler.getCustomLinkFromResourceReference(resourceReference);
            fnArgs[0] = xutils.getAttachmentURL(filename) + '#' + encodeURIComponent(customLink);
            fn.apply(this, fnArgs);
          });
        } else {
          fn.apply(this, arguments);
        }
      };
    }
    originalImportFiles.apply(this, importFilesArgs);
  };

  // Add support for inserting images by specifying the XWiki attachment reference.
  var originalShowImageDialog = EditorUi.prototype.showImageDialog;
  EditorUi.prototype.showImageDialog = function(title, value, fn, ignoreExisting, convertDataUri) {
    var showImageDialogArgs = Array.prototype.slice.call(arguments);
    var customLink = diagramLinkHandler.getCustomLinkFromURL(value);
    if (customLink) {
      // Edit the XWiki custom link instead of the actual URL.
      showImageDialogArgs[1] = customLink;
    }
    if (typeof fn === 'function') {
      showImageDialogArgs[2] = function(newValue, width, height) {
        var fnArgs = Array.prototype.slice.call(arguments);
        if (diagramLinkHandler.isXWikiCustomLink(newValue)) {
          // Save the actual URL, but keep the custom link as fragment identifier.
          fnArgs[0] = diagramLinkHandler.getURLFromCustomLink(newValue) + '#' + encodeURIComponent(newValue);
        }
        fn.apply(this, fnArgs);
      };
    }
    originalShowImageDialog.apply(this, showImageDialogArgs);
  };

  // This function is used by the image dialog to preload the images before inserting them. We have to overwrite it in
  // order to make it use the actual URL for XWiki image attachments.
  var originalLoadImage = EditorUi.prototype.loadImage;
  EditorUi.prototype.loadImage = function(uri, onload, onerror) {
    var loadImageArgs = Array.prototype.slice.call(arguments);
    if (diagramLinkHandler.isXWikiCustomLink(uri)) {
      loadImageArgs[0] = diagramLinkHandler.getURLFromCustomLink(uri);
    }
    originalLoadImage.apply(this, loadImageArgs);
  };
});

/**
 * Customizes the diagram export as URL and the diagram import from URL.
 */
define('diagram-url-io', ['diagram-utils', 'draw.io'], function(diagramUtils) {
  var urlParam = function(parameter, url) {
    var results = new RegExp('[\?&amp;]' + parameter + '=([^&amp;#]*)').exec(url);
    if (results === null) {
       return null;
    }
    return decodeURIComponent(results[1]);
  };

  var getParameterValueFromURL = function(parameter, url) {
    if (typeof URLSearchParams === 'function') {
      return new URL(url, window.location.href).searchParams.get(parameter);
    }
    // IE will get here since it's not supporting URLSearchParams.
    return urlParam(parameter, url);
  };

  // Custom diagram import from URL.
  var originalLoadUrl = EditorUi.prototype.loadUrl;
  EditorUi.prototype.loadUrl = function(url, success, error, forceBinary, retry, dataUriPrefix) {
    let exportedUrl = getParameterValueFromURL('url', url);
    if (exportedUrl) {
      let diagramXML = diagramUtils.getDiagramXMLFromURL(exportedUrl);
      if (diagramXML) {
        return success(diagramXML);
      }
    }
    return originalLoadUrl.apply(this, arguments);
  };

  // Custom diagram export as URL (using the current host).
  var originalCreateLink = EditorUi.prototype.createLink;
  EditorUi.prototype.createLink = function() {
    let rawURL = originalCreateLink.apply(this, arguments);
    // Do not include '#' because it's automatically added by getURL function below.
    let documentFragmentIndex = rawURL.indexOf('#');
    let documentFragment = rawURL.substring(documentFragmentIndex + 1);
    if (documentFragment.substring(0, 1) == 'R') {
      let queryString = '';
      let queryStringIndex = rawURL.indexOf('?');
      if (queryStringIndex &gt; -1) {
        queryString = rawURL.substring (queryStringIndex + 1, documentFragmentIndex);
      }
      // Append source parameter to the query
      queryString += '&amp;source=url';
      return window.location.protocol + '//' + window.location.host +
        new XWiki.Document('DiagramViewSheet', 'Diagram').getURL('view', queryString, documentFragment);
    }
    return rawURL;
  }
});

/**
 * Integrates draw.io diagram editor in XWiki.
 */
define('diagram-editor', [
  'jquery',
  'diagram-store',
  'diagram-utils',
  'diagram-graph-xml-filter',
  'diagram-link-editor',
  'diagram-image-editor',
  'diagram-url-io'
], function($, diagramStore, diagramUtils) {

  // These variables are used to decide if an image should be uploaded at original resolution or
  // should be declined for being too big.
  // Default values:
  // EditorUi.prototype.maxImageSize = 520;
  // EditorUi.prototype.maxImageBytes = 1000000;

  //
  // Diagram Editor Constructor.
  //
  var createDiagramEditor = function(options) {
    options = options || {};
    var editor = new Editor(/* chromeless: */ uiTheme === 'min', options.themes, /* model: */ null, /* graph: */ null,
      /* editable: */ true);
    var editorUI = new App(editor, options.container);
    // This is usefull for debugging the diagram editor from the JavaScript console.
    $(editorUI.container).data('diagramEditor', editorUI).trigger('diagramEditorCreated', editorUI);
    // Fix the editor UI before loading the diagram because layout changes can influence the way the shapes are drawn.
    fixEditorUI(editorUI);
    var file = diagramStore.createFile(editorUI, options.input, options.fileName, options.documentReference);
    // The first letter of the file name is used to determine the storage type. Let's use 'X' for XWiki storage.
    editorUI.loadFile('X' + options.fileName, true, file);
    return editorUI;
  };

  var fixEditorUI = function(editorUI) {
    hideFooter(editorUI);
    cleanMenu(editorUI);
    fixKeyboardShortcutsAction(editorUI);
    removeCompactModeToggle(editorUI);
    fixFullScreenToggle(editorUI);
    fixEditorButtons($(editorUI.container));
  };

  //
  // Disable the tabbed UI (setting urlParams['pages'] to '0' is not enough..)
  //
  EditorUi.prototype.initPages = function() {
    // Do nothing.
  };

  // Don't change the document title.
  App.prototype.updateDocumentTitle = function() {};

  //
  // Add support for disabling an entire sub-menu.
  //
  var originalAddSubmenu = Menus.prototype.addSubmenu;
  Menus.prototype.addSubmenu = function(name, menu, parent) {
    var subMenu = this.get(name);
    if (subMenu &amp;&amp; subMenu.visible !== false) {
      originalAddSubmenu.apply(this, arguments);
    }
  };

  // Remove the language picker because the diagram editor is configured to use the XWiki language.
  var originalCreateMenubar = Menus.prototype.createMenubar;
  Menus.prototype.createMenubar = function(container) {
    delete this.menus['language'];
    return originalCreateMenubar.apply(this, arguments);
  }

  //
  // Add support for not displaying 'browser' option from 'Import from' sub-menu
  //
  var originalAddItem = mxPopupMenu.prototype.addItem;
  mxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active) {
    if (title === (mxResources.get('browser') + '...') &amp;&amp; parent &amp;&amp; parent.innerText === 'Import from') {
      return null;
    }
    return originalAddItem.apply(this, arguments);
  };

  //
  // Hide the editor footer.
  //
  var hideFooter = function(editorUI) {
    // We call this just in case the footer is visible.
    editorUI.hideFooter();
    // Make sure the diagram editor doesn't leave space for the footer.
    editorUI.footerHeight = 0;
  };

  //
  // Clean the editor menu by removing the features that are not needed.
  //
  var cleanMenu = function(editorUI) {
    // Disable and hide some of the menu entries.
    [
      // File menu
      'synchronize', 'new', 'open', 'save', 'saveAs', 'rename', 'makeCopy', 'close',
      // Extras menu
      'autosave', 'showStartScreen', 'plugins', 'offline', 'chromeApp',
       // Help menu
      'downloadDesktop', 'useOffline',
      // ExportAs
      'exportHtml'
    ].forEach(function(actionName) {
      var action = editorUI.actions.actions[actionName];
      if (action) {
        action.enabled = action.visible = false;
      }
    });

    // Disable and hide some of the sub-menus.
    [
      // File menu
      'openFrom', 'openRecent', 'publish', 'embed',
      // Extras menu
      'theme'
    ].forEach(function(name) {
      var subMenu = editorUI.menus.get(name);
      if (subMenu) {
        subMenu.enabled = subMenu.visible = false;
      }
    });
  };

  //
  // Fix the side bar tool tip: the tool tip position is computed as if the editor takes the full screen.
  //
  Sidebar.prototype.getTooltipOffset = function() {
    // Adjust the tool tip coordinates with the editor offset.
    var offset = $(this.editorUi.container).offsetParent().offset();
    return {x: offset.left, y: offset.top};
  };

  //
  // Overwrite the Keyboard Shortcuts action because it uses the wrong URL.
  //
  var fixKeyboardShortcutsAction = function(editorUI) {
    var keyboardShortcutsAction = editorUI.actions.get('keyboardShortcuts');
    if (keyboardShortcutsAction) {
      var originalFunct = keyboardShortcutsAction.funct;
      keyboardShortcutsAction.funct = function() {
        if (mxClient.IS_SVG) {
          window.open(diagramEditorBasePath + 'shortcuts.svg');
        } else {
          originalFunct.apply(this, arguments);
        }
      };
    }
  };

  //
  // Remove the compact mode toggle and update the position of the remaining buttons.
  //
  var removeCompactModeToggle = function(editorUI) {
    if (typeof editorUI.toggleCompactMode === 'function') {
      editorUI.toggleCompactMode(true);
      var buttons = $(editorUI.container).find('.geToolbarContainer &gt; a.geButton');
      buttons.last().remove();
      buttons.css('right', function(index, value) {
        return (parseInt(value) - 16) + 'px';
      });
    }
  };

  var fullScreen = new XWiki.widgets.FullScreen();
  var fixFullScreenToggle = function(editorUI) {
    mxEvent.removeAllListeners(editorUI.fullscreenElement);
    editorUI.container._x_fullScreenActivator = editorUI.fullscreenElement;
    $(editorUI.fullscreenElement).click(function(event) {
      event.preventDefault();
      var isFullScreen = $(editorUI.container).parent('.fullScreenWrapper').length &gt; 0;
      if (isFullScreen) {
        // Exit full screen mode.
        fullScreen.closeFullScreen();
        editorUI.toggleCompactMode(true);
      } else {
        // Enter full screen mode.
        fullScreen.makeFullScreen(editorUI.container);
        // The previous line hides the 'fullScreenActivator' and shows the 'Exit Full Screen' button. We want to use the
        // 'fullScreenActivator' for exiting the full screen mode. The 'Exit Full Screen' button is hidden from CSS.
        $(editorUI.fullscreenElement).show();
        editorUI.toggleCompactMode();
      }
    });
  };

  //
  // Add the type of the buttons manually to stop the default submit. The preventDefault used in editDiagram is not
  // working for these since in draw.io code is called stopPropagation.
  //
  var fixEditorButtons = function(editor) {
    editor.find('button:not([type])').each(function() {
      $(this).attr('type', 'button');
    });
  };

  // mxRuler adds the ruler to the document body instead of adding it to the editor container.
  var originalMxDualRuler = mxDualRuler;
  mxDualRuler = function(editorUI, unit) {
    originalMxDualRuler.apply(this, arguments);
    $([this.hRuler.container, this.vRuler.container]).appendTo(editorUI.container);
  };
  mxDualRuler.prototype = Object.create(originalMxDualRuler.prototype);
  mxDualRuler.prototype.constructor = mxDualRuler;

  var themes = {};
  var getDiagramEditorConfig = function(container) {
    var input = $(container).children('input.diagram-content');
    var documentReference = input.data('reference') || '';
    if (typeof documentReference === 'string') {
      documentReference = XWiki.Model.resolve(documentReference, XWiki.EntityType.DOCUMENT,
        XWiki.currentDocument.documentReference);
    }
    var fileName = input.data('title') || $('#document-title').text();
    if (!fileName) {
      fileName = documentReference.name == 'WebHome' ? documentReference.parent.name : documentReference.name;
    }
    return {
      container: container,
      themes: themes,
      fileName: fileName,
      input: input,
      documentReference: documentReference
    };
  };

  //
  // jQuery plugin
  //
  $.fn.editDiagram = function(options) {
    return this.on('click', 'button', function(event) {
      // Make sure the buttons from the editor UI don't submit the edit form.
      event.preventDefault();
    }).on('keydown keyup keypress', '.geContentEditable', function(event) {
      // Make sure the keyboard events triggered from the nested editable sections are not propagated as they may
      // trigger shortcut keys (the nested editable sections need to behave like input fields).
      // See issue #15: If you install XWebIDE Application you can't use "W" letter in the diagram text.
      event.stopPropagation();
    }).each(function() {
      // We need this CSS class on the body element in order to have proper styling for the UI elements (menus, dialogs,
      // tooltips) that are added directly under the body element.
      $(document.body).addClass('geEditor');
      createDiagramEditor($.extend(getDiagramEditorConfig(this), options));
      $(this).removeClass('loading');
    });
  };

  return diagramUtils.loadTranslationAndTheme().done(function(theme) {
    // Configure the default editor theme.
    themes[Graph.prototype.defaultThemeName] = theme;
  });
});</code>
    </property>
    <property>
      <name>Diagram Editor</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1787d86a-d14d-400e-94d8-6de104a43cde</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'diagram-setup': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', 'minify=$!services.debug.minify')
  },
  map: {
    'diagram-utils': {
      'mxgraph-common': 'mxgraph-editor'
    },
    'diagram-link-handler': {
      'draw.io.common': 'draw.io'
    }
  }
});

require(['diagram-setup'], function() {
  require(['jquery', 'diagram-editor'], function($, diagramEditorPromise) {
    diagramEditorPromise.done(function() {
      $('.diagram-editor').editDiagram();
    });
  });
});</code>
    </property>
    <property>
      <name>Startup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
