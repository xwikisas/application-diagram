<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="Diagram.DiagramEditSheet" locale="">
  <web>Diagram</web>
  <name>DiagramEditSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Diagram.ResourceSelector.WebHome" /}}

{{velocity output="false"}}
#macro (diagramLinkModal)
  &lt;div class="modal" id="diagramLinkModal" tabindex="-1" role="dialog"
      aria-labelledby="diagramLinkModal-label" data-backdrop="static" data-keyboard="false"&gt;
    &lt;div class="modal-dialog modal-lg" role="document"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
          &lt;/button&gt;
          &lt;div class="modal-title" id="diagramLinkModal-label"&gt;
            Link
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="modal-body xform"&gt;
          #resourceSelector()
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;
            $escapetool.xml($services.localization.render('cancel'))
          &lt;/button&gt;
          &lt;button type="button" class="btn btn-primary"&gt;&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}

{{velocity}}
{{html clean="false"}}
#if ($doc.getObject('Diagram.DiagramClass'))
  ## Disable the keyboard shortcuts because they prevent the user from typing text inside the diagram (the diagram
  ## editor doesn't use standard text fields for entering the labels for the various shapes the diagram is made of)
  #set ($keyboardShortcutsEnabled = false)
  #set ($discard = $xwiki.ssx.use('Diagram.DiagramSheet'))
  #set ($discard = $xwiki.jsx.use('Diagram.DiagramEditSheet'))
  ## Issue #219: Cannot modify diagram title in diagram editor
  &lt;div class="row xform"&gt;
    &lt;div class="col-xs-12"&gt;
      &lt;dl&gt;
        &lt;dt&gt;
          &lt;label for="xwikidoctitleinput"&gt;
            $escapetool.xml($services.localization.render('core.editors.content.titleField.label'))
          &lt;/label&gt;
        &lt;/dt&gt;
        &lt;dd&gt;
          &lt;input id="xwikidoctitleinput" type="text" name="title" value="$escapetool.xml($tdoc.title)"&gt;
        &lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="diagram-editor loading" data-diagram-config="$escapetool.xml($jsontool.serialize($diagramConfig))"&gt;
    &lt;input class="diagram-content" type="hidden" name="content" value="$escapetool.xml($tdoc.content)" /&gt;
  &lt;/div&gt;
  #diagramLinkModal()
#end
{{/html}}
{{/velocity}}</content>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>07b08a89-bce0-494e-89e6-efaef0cfd155</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Adds support for editing diagrams stored in XWiki pages.
 */
define('diagram-store', ['jquery', 'xwiki-meta', 'xwiki-utils', 'diagram-utils', 'diagram-config', 'draw.io',
    'xwiki-events-bridge'], function($, xm, xutils, diagramUtils, diagramConfig) {
  var files = [];
  window._xfiles = files;
  var createFile = function(ui, input, title, documentReference) {
    var file = new XWikiFile(ui, input, title, documentReference);
    files.push(file);
    return file;
  };

  var XWikiFile = function(ui, input, title, documentReference) {
    this.input = input;
    DrawioFile.call(this, ui, input.val());
    this.title = title;
    this.documentReference = documentReference;
  };

  mxUtils.extend(XWikiFile, DrawioFile);

  $.extend(XWikiFile.prototype, {
    getMode: function() {
      return 'xwiki';
    },
    getTitle: function() {
      return this.title;
    },
    getData: function() {
      return this.input.val();
    },
    setData: function(data) {
      this.input.val(data);
    },
    isCompressed: function() {
      return false;
    },
    // TODO: When upgrading the drawio version, ensure that this method is copied from the drawio code and the
    // `resolveReferences` parameter of the getFileData is set to `true` to prevent incorrect formatting of links to
    // wiki pages in the diagram content. https://github.com/xwikisas/application-diagram/issues/295
    createData: function() {
      var actualPages = this.ui.pages;

      if (this.isRealtime()) {
        // Uses ownPages for getting file data below
        this.ui.pages = this.ownPages;

        // Updates view state in own current page
        if (this.ui.currentPage != null) {
          var ownPage = this.ui.getPageById(
            this.ui.currentPage.getId(),
            this.ownPages);

          if (ownPage != null) {
            ownPage.viewState = this.ui.editor.graph.getViewState();
            ownPage.needsUpdate = true;
          }
        }
      }

      var result = this.ui.getFileData(null, null, null, null, null, null, null, null, this,
        !this.isCompressed(), true);
      this.ui.pages = actualPages;
      return result;
    },
    open: function() {
      var graphXML = this.getData() || '&lt;mxGraphModel/&gt;';
      this.ui.setFileData(graphXML);
      this.changeListener = mxUtils.bind(this, function(sender, eventObject) {
        this.setModified(true);
      });
      this.ui.editor.graph.model.addListener(mxEvent.CHANGE, this.changeListener);
    }
  });

  var forEachOpenedFile = function(visitor) {
    files.forEach(function(file) {
      if (file.getUi() &amp;&amp; file.getUi().getCurrentFile() === file) {
        visitor(file);
      }
    });
  };

  var updateFormFields = function(event) {
    forEachOpenedFile(function(file) {
      // This is a workaround for https://github.com/jgraph/drawio/issues/490
      // Stop editing for getting the latest content from diagram
      file.ui.editor.graph.stopEditing(false);
      file.updateFileData();
    });
  };

  var resetDirty = function() {
    forEachOpenedFile(function(file) {
      file.setModified(false);
    });
  };

  var pipeDeferred = function(left, right) {
    left.done($.proxy(right, 'resolve')).fail($.proxy(right, 'reject'));
  };

  var saveBlobAsImageAttachment = function(blob, fileName, documentReference) {
    var attachmentReference = new XWiki.AttachmentReference(fileName, documentReference);
    var uploadMethod = (diagramConfig.isTemporaryUploadSupported) ? xutils.temporaryUploadAttachment : xutils.uploadAttachment;
    var uploadAttachment = $.proxy(uploadMethod, null, blob, attachmentReference);
    // Avoid creating too many versions of the attachment. Upload the attachment even if we failed to delete it first.
    return xutils.deleteAttachment(attachmentReference).then(uploadAttachment, uploadAttachment);
  };

  var imageCache = {};
  var saveFileAsPNGImageAttachment = function(file) {
    var deferred = $.Deferred();
    file.getUi().exportToCanvas(/* callback */ function(canvas) {
      if (canvas) {
        try {
          canvas.toBlob(function(blob) {
            pipeDeferred(saveBlobAsImageAttachment(blob, 'diagram.png', file.documentReference), deferred);
          });
        } catch(err) {
          deferred.reject();
        }
      } else {
        deferred.reject();
      }
    }, /* width */ null, /* imageCache */ imageCache, /* background */ null, /* error */ function(e) {
      new XWiki.widgets.Notification(
        $jsontool.serialize($services.localization.render('diagram.editor.saveAsImageAttachmentError')), 'error');
      deferred.reject();
    }, /* limitHeight */ null, /* ignoreSelection */ true, /* scale */ diagramConfig.pdfImageExportZoom);
    return deferred.promise();
  };

  var saveFileAsSVGImageAttachment = function(file) {
    var deferred = $.Deferred();
    var svgRoot = file.ui.editor.graph.getSvg(/* background: */ '#ffffff', /* scale: */ null, /* border: */ null,
      /* nocrop: */ true, /* crisp: */ null, /* ignoreSelection: */ true);
    // Embed the images because the PDF exporter might not be able to access them.
    file.ui.convertImages(svgRoot, function() {
      var svg = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n' +
        '&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;\n' +
        mxUtils.getXml(svgRoot);
      var blob = new Blob([svg], {type: 'image/svg+xml'});
      pipeDeferred(saveBlobAsImageAttachment(blob, 'diagram.svg', file.documentReference), deferred);
    }, imageCache);
    return deferred.promise();
  };

  var saveFileAsImageAttachments = function(file) {
    // This is a workaround for https://github.com/jgraph/drawio/issues/490
    // Stop editing for getting the latest content from diagram
    file.ui.editor.graph.stopEditing(false);
    // We upload the PNG image even if the SVG upload has failed.
    var pngUpload = $.proxy(saveFileAsPNGImageAttachment, null, file);
    return saveFileAsSVGImageAttachment(file).then(pngUpload, pngUpload);
  };

  var saveFilesAsImageAttachments = function() {
    var uploadDeferred = $.Deferred().resolve();
    forEachOpenedFile(function(file) {
      // We do the next upload even if the previous uploads have failed.
      var nextUpload = $.proxy(saveFileAsImageAttachments, null, file);
      uploadDeferred = uploadDeferred.then(nextUpload, nextUpload);
    });
    return uploadDeferred.promise();
  };

  var uploadInProgress = false;
  // Attach the diagram SVG to the diagram page in order to use it for viewing the diagram and for exporting the diagram
  // to PDF. For this we need to stop the default save until the upload action is completed and trigger it after.
  $(document).on('xwiki:actions:beforeSave', function(event, data) {
    if (!uploadInProgress) {
      uploadInProgress = true;
      event.stopPropagation();
      var saveButton = $(event.target);
      saveButton.prop('disabled', true);
      saveFilesAsImageAttachments().fail(function(e) {
        new XWiki.widgets.Notification(
          $jsontool.serialize($services.localization.render('diagram.editor.saveAsImageAttachmentError')), 'error');
      }).always(function() {
        saveButton.prop('disabled', false).click();
      });
    } else {
      uploadInProgress = false;
    }
  });

  // We need to update the form fields before the form is validated (for Preview, Save and Save &amp; Continue).
  $(document).on('xwiki:actions:beforePreview xwiki:actions:beforeSave', updateFormFields);

  var submitInProgress = false;
  // Disable the leave confirmation when the form action buttons are used.
  $(document).on('xwiki:actions:cancel xwiki:actions:preview xwiki:actions:save xwiki:document:saved',
    function(event, data) {
      // We reset the dirty field on 'xwiki:actions:save' only if it's not a Save &amp; Continue. Otherwise we wait for
      // 'xwiki:document:saved' to be sure the document was saved.
      if (!data || !data['continue']) {
        submitInProgress = event.type === 'xwiki:actions:preview' || event.type === 'xwiki:actions:save';
        resetDirty();
      }
    });

  $(window).on('beforeunload', function(event) {
    // Update the form fields before the page is unloaded in order to allow the browser to cache their values
    // (Back-Forward and Soft Reload cache). The form fields have already been updated (for validation) if a submit
    // is currently in progress.
    if (!submitInProgress) {
      updateFormFields();
    } else {
      submitInProgress = false;
    }
  });

  return {
    createFile: createFile
  };
});</code>
    </property>
    <property>
      <name>Diagram Store</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a9be39c0-68be-4333-ac14-93fcee0a275b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Overrides the link dialog in order to support creating links to wiki pages.
 */
define('diagram-link-editor', [
  'jquery',
  'diagram-link-handler',
  'draw.io',
  'resourceSelector'
], function($, diagramLinkHandler) {
  /**
   * Override in order to change the Element type check from a.constructor !== Element, which was failing due to a
   * collision with the PrototypeJS's own implementation of the standard Element.
   * See http://api.prototypejs.org/dom/Element/new/index.html. This code is taken from the minified version of
   * mxClient.js and should be removed after PrototypeJS is no longer loaded.
   */
  mxUtils.isNode = function(a, b, c, d) {
    return null == a || a.nodeType !== Node.ELEMENT_NODE || null != b &amp;&amp;
      a.nodeName.toLowerCase() != b.toLowerCase() ? !1 : null == c || a.getAttribute(c) == d;
  };

  EditorUi.prototype.showLinkDialog = function(value, selectLabel, callback, showNewWindowOption, linkTarget) {
    var resourceReference = diagramLinkHandler.getResourceReferenceFromCustomLink(value);
    // We append the modal to the body element in order to fix Issue #108: "Inserting a link in full screen mode is not
    // possible".
    $('#diagramLinkModal').appendTo('body').selectResource(resourceReference, {
      selectLabel: selectLabel
    }).done(function(resourceReference) {
      callback(diagramLinkHandler.getCustomLinkFromResourceReference(resourceReference), null, linkTarget);
    });
  };

  // For some cases, to consider wrapping or overflow, w might be altered and we need to keep the initial value as
  // it was from bounds.width of the base mxText node.
  var originalText = mxSvgCanvas2D.prototype.text;
  mxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir) {
    this.state.initialWidth = w;
    return originalText.apply(this, arguments);
  };

  // Don't add warning when the viewer doesn't support SVG 1.1, since we create a fallback for foreignObjects.
  Graph.prototype.addForeignObjectWarning = function(canvas, root) {
    // Do nothing.
  }

  // Overwrite Graph.getSvg in order to replace XWiki custom links with absolute URLs.
  // Also fix the text fallback for viewers with no support for foreignObjects.
  var originalGraphGetSVG = Graph.prototype.getSvg;
  Graph.prototype.getSvg = function(background, scale, border, nocrop, crisp, ignoreSelection, showText, imgExport,
      linkTarget, hasShadow, incExtFonts, keepTheme, exportType, cells) {
    imgExport = imgExport || this.createSvgImageExport();
    var originalGetLinkForCellState = imgExport.getLinkForCellState;
    imgExport.getLinkForCellState = function() {
      var result = originalGetLinkForCellState.apply(this, arguments);
      if (diagramLinkHandler.isXWikiCustomLink(result)) {
        result = diagramLinkHandler.getURLFromCustomLink(result);
        // Use the absolute URL because this SVG is used for PDF export which needs to be portable.
        result = $('&lt;a/&gt;').attr('href', result).prop('href');
      }
      return result;
    }
    var originalDrawState = imgExport.drawState;
    imgExport.drawState = function(state, canvas) {
      var originalCreateAlternateContent = canvas.createAlternateContent;
      canvas.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip,
          rotation) {
        if (format === 'html') {
          // Keep only the text content.
          str = $('&lt;div/&gt;').html(str).text() || this.foAltText;
        }
        return originalCreateAlternateContent.call(this, fo, x, y, w, h, str, align, valign, wrap, format, overflow,
          clip, rotation);
      };
      return originalDrawState.apply(this, arguments);
    };
    try {
      return originalGraphGetSVG.call(this, background, scale, border, nocrop, crisp, ignoreSelection, showText,
        imgExport, linkTarget, hasShadow, incExtFonts, keepTheme, exportType, cells);
    } finally {
      imgExport.getLinkForCellState = originalGetLinkForCellState;
      imgExport.drawState = originalDrawState;
    }
  };
});

/**
 * Adds support for using XWiki image attachments in diagrams.
 */
define('diagram-image-editor', ['xwiki-utils', 'diagram-link-handler', 'draw.io'], function(xutils, diagramLinkHandler) {
  // Fix the base URL used when exporting the diagram as image.
  var originalCreateImageUrlConverter = EditorUi.prototype.createImageUrlConverter;
  EditorUi.prototype.createImageUrlConverter = function() {
    var converter = originalCreateImageUrlConverter.call(this);
    converter.convert = function(src) {
      // Use baseDomain instead of baseUrl to detect external URLs.
      if (src &amp;&amp; (src.substr(0, 7) === 'http://' || src.substr(0, 8) === 'https://') &amp;&amp;
          src.substr(0, converter.baseDomain.length) !== converter.baseDomain) {
        src = PROXY_URL + '?url=' + encodeURIComponent(src);
      }
      return src;
    };
    return converter;
  };
        
  // Copied from the drawio version 24.5.4 to include a fix for importing a file in an empty diagram. This method should
  // be removed once we upgrade to a drawio version &gt;= 24.4.0. Being a big method, the structure was altered just to
  // make it shorter.
  var importFilesNew = function(files, x, y, maxSize, fn, resultFn, filterFn, barrierFn,
		resizeDialog, maxBytes, resampleThreshold, ignoreEmbeddedXml, evt) {
    maxSize = (maxSize != null) ? maxSize : this.maxImageSize;
    maxBytes = (maxBytes != null) ? maxBytes : this.maxImageBytes;
    var crop = x != null &amp;&amp; y != null;
    var resizeImages = true;
    x = (x != null) ? x : 0;
    y = (y != null) ? y : 0;
    // Checks if large images are imported
    var largeImages = false;
    if (!mxClient.IS_CHROMEAPP &amp;&amp; files != null) {
      var thresh = resampleThreshold || this.resampleThreshold;
      for (var i = 0; i &lt; files.length; i++) {
        if (files[i].type.substring(0, 9) !== 'image/svg' &amp;&amp;
            files[i].type.substring(0, 6) === 'image/' &amp;&amp;
            files[i].size &gt; thresh) {
          largeImages = true;
          break;
        }
      }
    }
    var doImportFiles = mxUtils.bind(this, function() {
      var graph = this.editor.graph;
      var gs = graph.gridSize;
      fn = (fn != null) ? fn : mxUtils.bind(this, function(data, mimeType, x, y, w, h, filename, done, file) {
        try {
          if (data != null &amp;&amp; data.substring(0, 10) == '&lt;mxlibrary') {
            this.spinner.stop();
            this.loadLibrary(new LocalLibrary(this, data, filename));
            this.showSidebar();
            return null;
          }
          else {
            // Drop on empty file ignores drop location
            if (this.isCompatibleString(data) &amp;&amp; files.length == 1 &amp;&amp; evt != null &amp;&amp;
                evt.type == 'drop' &amp;&amp; this.isBlankFile() &amp;&amp; !this.canUndo()) {
              crop = false;
              x = 0;
              y = 0;
            }
            return this.importFile(data, mimeType, x, y, w, h, filename,
                                   done, file, crop, ignoreEmbeddedXml, evt);
          }
        }
        catch (e) {
          this.handleError(e);
          return null;
        }
      });
      resultFn = (resultFn != null) ? resultFn : mxUtils.bind(this, function(cells) {
        graph.setSelectionCells(cells);
      });
      if (this.spinner.spin(document.body, mxResources.get('loading'))) {
        var count = files.length;
        var remain = count;
        var queue = [];
        // Barrier waits for all files to be loaded asynchronously
        var barrier = mxUtils.bind(this, function(index, fnc) {
          queue[index] = fnc;
          if (--remain == 0) {
            this.spinner.stop();
            if (barrierFn != null) {
              barrierFn(queue);
            }
            else {
              var cells = [];
              graph.getModel().beginUpdate();
              try {
                for (var j = 0; j &lt; queue.length; j++) {
                  var tmp = queue[j]();
                  if (tmp != null) {
                    cells = cells.concat(tmp);
                  }
                }
              }
              finally {
                graph.getModel().endUpdate();
              }
            }
            resultFn(cells);
          }
        });
        for (var i = 0; i &lt; count; i++) {
          (mxUtils.bind(this, function(index) {
            var file = files[index];
            if (file != null) {
              var reader = new FileReader();
              reader.onload = mxUtils.bind(this, function(e) {
                if (filterFn == null || filterFn(file)) {
                  try {
                    if (file.type.substring(0, 6) == 'image/') {
                      if (file.type.substring(0, 9) == 'image/svg') {
                        // Checks if SVG contains content attribute
                        var data = Graph.clipSvgDataUri(e.target.result);
                        var comma = data.indexOf(',');
                        var svgText = decodeURIComponent(escape(atob(data.substring(comma + 1))));
                        var root = mxUtils.parseXml(svgText);
                        var svgs = root.getElementsByTagName('svg');
                        if (svgs.length &gt; 0) {
                          var svgRoot = svgs[0];
                          var cont = (ignoreEmbeddedXml) ? null : svgRoot.getAttribute('content');
                          if (cont != null &amp;&amp; cont.charAt(0) != '&lt;' &amp;&amp; cont.charAt(0) != '%') {
                            cont = unescape((window.atob) ? atob(cont) : Base64.decode(cont, true));
                          }
                          if (cont != null &amp;&amp; cont.charAt(0) == '%') {
                            cont = decodeURIComponent(cont);
                          }
                          if (cont != null &amp;&amp; (cont.substring(0, 8) === '&lt;mxfile ' ||
                                               cont.substring(0, 14) === '&lt;mxGraphModel ')) {
                            barrier(index, mxUtils.bind(this, function() {
                              return fn(cont, 'text/xml', x + index * gs, y + index * gs, 0, 0, file.name);
                            }));
                          }
                          else {
                            // SVG needs special handling to add viewbox if missing and
                            // find initial size from SVG attributes (only for IE11)
                            barrier(index, mxUtils.bind(this, function() {
                              try {
                                // Parses SVG and find width and height
                                if (root != null) {
                                  var svgs = root.getElementsByTagName('svg');
                                  if (svgs.length &gt; 0) {
                                    var svgRoot = svgs[0];
                                    var w = svgRoot.getAttribute('width');
                                    var h = svgRoot.getAttribute('height');
                                    if (w != null &amp;&amp; w.charAt(w.length - 1) != '%') {
                                      w = parseFloat(w);
                                    }
                                    else {
                                      w = NaN;
                                    }
                                    if (h != null &amp;&amp; h.charAt(h.length - 1) != '%') {
                                      h = parseFloat(h);
                                    }
                                    else {
                                      h = NaN;
                                    }
                                    // Check if viewBox attribute already exists
                                    var vb = svgRoot.getAttribute('viewBox');
                                    if (vb == null || vb.length == 0) {
                                      svgRoot.setAttribute('viewBox', '0 0 ' + w + ' ' + h);
                                    }
                                    // Uses width and height from viewbox for
                                    // missing width and height attributes
                                    else if (isNaN(w) || isNaN(h)) {
                                      var tokens = vb.split(' ');
                                      if (tokens.length &gt; 3) {
                                        w = parseFloat(tokens[2]);
                                        h = parseFloat(tokens[3]);
                                      }
                                    }
                                    data = Editor.createSvgDataUri(mxUtils.getXml(svgRoot));
                                    var s = Math.min(1, Math.min(maxSize / Math.max(1, w)), maxSize / Math.max(1, h));
                                    var cells = fn(data, file.type, x + index * gs, y + index * gs, Math.max(
                                      1, Math.round(w * s)), Math.max(1, Math.round(h * s)), file.name);
                                    // Hack to fix width and height asynchronously
                                    if (cells != null &amp;&amp; (isNaN(w) || isNaN(h))) {
                                      var img = new Image();
                                      img.onload = mxUtils.bind(this, function() {
                                        w = Math.max(1, img.width);
                                        h = Math.max(1, img.height);
                                        cells[0].geometry.width = w;
                                        cells[0].geometry.height = h;
                                        svgRoot.setAttribute('viewBox', '0 0 ' + w + ' ' + h);
                                        data = Editor.createSvgDataUri(mxUtils.getXml(svgRoot));
                                        var semi = data.indexOf(';');
                                        if (semi &gt; 0) {
                                          data = data.substring(0, semi) + data.substring(data.indexOf(',', semi + 1));
                                        }
                                        graph.setCellStyles('image', data, [cells[0]]);
                                      });
                                      img.src = Editor.createSvgDataUri(mxUtils.getXml(svgRoot));
                                    }
                                    return cells;
                                  }
                                }
                              }
                              catch (e) {
                                // ignores any SVG parsing errors
                              }
                              return null;
                            }));
                          }
                        }
                        else {
                          barrier(index, mxUtils.bind(this, function() {
                            return null;
                          }));
                        }
                      }
                      else {
                        // Checks if PNG+XML is available to bypass code below
                        var containsModel = false;
                        if (file.type == 'image/png') {
                          var xml = (ignoreEmbeddedXml) ? null : this.extractGraphModelFromPng(e.target.result);
                          if (xml != null &amp;&amp; xml.length &gt; 0) {
                            var img = new Image();
                            img.src = e.target.result;
                            barrier(index, mxUtils.bind(this, function() {
                              return fn(xml, 'text/xml', x + index * gs, y + index * gs,
                                        img.width, img.height, file.name);
                            }));
                            containsModel = true;
                          }
                        }
                        // Additional asynchronous step for finding image size
                        if (!containsModel) {
                          // Cannot load local files in Chrome App
                          if (mxClient.IS_CHROMEAPP) {
                            this.spinner.stop();
                            this.showError(mxResources.get('error'), mxResources.get('dragAndDropNotSupported'),
                                           mxResources.get('cancel'), mxUtils.bind(this, function()
                                                                                   {
                              // Hides the dialog
                            }), null, mxResources.get('ok'), mxUtils.bind(this, function()
                                                                          {
                              // Redirects to import function
                              this.actions.get('import').funct();
                            })
                                          );
                          }
                          else {
                            this.loadImage(e.target.result, mxUtils.bind(this, function(img) {
                              this.resizeImage(img, e.target.result, mxUtils.bind(this, function(data2, w2, h2) {
                                barrier(index, mxUtils.bind(this, function() {
                                  // Refuses to insert images above a certain size as they kill the app
                                  if (data2 != null &amp;&amp; data2.length &lt; maxBytes) {
                                    var s = (!resizeImages || !this.isResampleImageSize(
                                      file.size, resampleThreshold)) ? 1 :
                                    Math.min(1, Math.min(maxSize / w2, maxSize / h2));
                                    return fn(data2, file.type, x + index * gs, y + index * gs,
                                              Math.round(w2 * s), Math.round(h2 * s), file.name);
                                  }
                                  else {
                                    this.handleError({message: mxResources.get('imageTooBig')});
                                    return null;
                                  }
                                }));
                              }), resizeImages, maxSize, resampleThreshold, file.size);
                            }), mxUtils.bind(this, function() {
                              this.handleError({message: mxResources.get('invalidOrMissingFile')});
                            }));
                          }
                        }
                      }
                    }
                    else {
                      var data = e.target.result;
                      fn(data, file.type, x + index * gs, y + index * gs, 240, 160, file.name, function(cells) {
                        barrier(index, function() {
                          return cells;
                        });
                      }, file);
                    }
                  }
                  catch (e) {
                    // Ignores file parsing error
                    barrier(index, mxUtils.bind(this, function() {
                      return null;
                    }));
                    if (window.console != null) {
                      console.error(e, file);
                    }
                  }
                }
                else {
                  // Ignores file and decrements counter
                  barrier(index, mxUtils.bind(this, function()
                                              {
                    return null;
                  }));
                }
              });
              // Handles special cases
              if (/(\.v(dx|sdx?))($|\?)/i.test(file.name) || /(\.vs(x|sx?))($|\?)/i.test(file.name)) {
                fn(null, file.type, x + index * gs, y + index * gs, 240, 160, file.name, function(cells) {
                  barrier(index, function() {
                    return cells;
                  });
                }, file);
              }
              else if (file.type.substring(0, 5) == 'image' || file.type == 'application/pdf') {
                reader.readAsDataURL(file);
              }
              else {
                reader.readAsText(file);
              }
            }
          }))(i);
        }
      }
    });
    if (largeImages) {
      // Workaround for lost files array in async code
      var tmp = [];
      for (var i = 0; i &lt; files.length; i++) {
        tmp.push(files[i]);
      }
      files = tmp;
      this.confirmImageResize(function(doResize) {
        resizeImages = doResize;
        doImportFiles();
      }, resizeDialog);
    }
    else {
      doImportFiles();
    }
  };
        
  // Override for uploading the image as attachment instead of encode it to Base64.
  var originalImportFiles = EditorUi.prototype.importFiles;
  EditorUi.prototype.importFiles = function(files, x, y, maxSize, fn, resultFn, filterFn, barrierFn, resizeDialog,
      maxBytes, resampleThreshold, ignoreEmbeddedXml, evt) {
    let importFilesArgs = arguments;
    if (fn) {
      let editorUi = this;
      importFilesArgs = Array.prototype.slice.call(arguments);
      // This is the call back function responsible to insert the image.
      importFilesArgs[4] = function(data, mimeType, x, y, w, h, filename) {
        if (data.substring(0, 5) == 'data:') {
          let fnArgs = Array.prototype.slice.call(arguments);
          let fileBase64Data = data.substring(data.indexOf(',') + 1);
          xutils.uploadAttachment(editorUi.base64ToBlob(fileBase64Data, mimeType), filename).done(function() {
            // Include the attachment reference in the URL using the fragment identifier in order to be able to use it
            // when saving the diagram (we want to save the attachment reference not the attachment URL).
            let resourceReference = {
              type: 'attach',
              reference: XWiki.Model.serialize(new XWiki.AttachmentReference(filename))
            };
            let customLink = diagramLinkHandler.getCustomLinkFromResourceReference(resourceReference);
            fnArgs[0] = xutils.getAttachmentURL(filename) + '#' + encodeURIComponent(customLink);
            fn.apply(this, fnArgs);
          });
        } else {
          fn.apply(this, arguments);
        }
      };
    }
    importFilesNew.apply(this, importFilesArgs);
  };

  // Add support for inserting images by specifying the XWiki attachment reference.
  var originalShowImageDialog = EditorUi.prototype.showImageDialog;
  EditorUi.prototype.showImageDialog = function(title, value, fn, ignoreExisting, convertDataUri, withCrop,
      initClipPath) {
    var showImageDialogArgs = Array.prototype.slice.call(arguments);
    var customLink = diagramLinkHandler.getCustomLinkFromURL(value);
    if (customLink) {
      // Edit the XWiki custom link instead of the actual URL.
      showImageDialogArgs[1] = customLink;
    }
    if (typeof fn === 'function') {
      showImageDialogArgs[2] = function(newValue, width, height) {
        var fnArgs = Array.prototype.slice.call(arguments);
        if (diagramLinkHandler.isXWikiCustomLink(newValue)) {
          // Save the actual URL, but keep the custom link as fragment identifier.
          fnArgs[0] = diagramLinkHandler.getURLFromCustomLink(newValue) + '#' + encodeURIComponent(newValue);
        }
        fn.apply(this, fnArgs);
      };
    }
    originalShowImageDialog.apply(this, showImageDialogArgs);
  };

  // This function is used by the image dialog to preload the images before inserting them. We have to overwrite it in
  // order to make it use the actual URL for XWiki image attachments.
  var originalLoadImage = EditorUi.prototype.loadImage;
  EditorUi.prototype.loadImage = function(uri, onload, onerror) {
    var loadImageArgs = Array.prototype.slice.call(arguments);
    if (diagramLinkHandler.isXWikiCustomLink(uri)) {
      loadImageArgs[0] = diagramLinkHandler.getURLFromCustomLink(uri);
    }
    originalLoadImage.apply(this, loadImageArgs);
  };
});

/**
 * Customizes the diagram export as URL and the diagram import from URL.
 */
define('diagram-url-io', ['diagram-utils', 'draw.io'], function(diagramUtils) {
  var urlParam = function(parameter, url) {
    var results = new RegExp('[\?&amp;]' + parameter + '=([^&amp;#]*)').exec(url);
    if (results === null) {
       return null;
    }
    return decodeURIComponent(results[1]);
  };

  var getParameterValueFromURL = function(parameter, url) {
    if (typeof URLSearchParams === 'function') {
      return new URL(url, window.location.href).searchParams.get(parameter);
    }
    // IE will get here since it's not supporting URLSearchParams.
    return urlParam(parameter, url);
  };

  // Custom diagram import from URL.
  var loadUrl = function(url) {
    var diagramXML = null;
    let exportedUrl = getParameterValueFromURL('url', url);
    if (exportedUrl) {
      diagramXML = diagramUtils.getDiagramXMLFromURL(exportedUrl);
    }
    return diagramXML;
  };

  // Custom diagram export as URL (using the current host).
  var originalCreateLink = EditorUi.prototype.createLink;
  EditorUi.prototype.createLink = function(linkTarget, linkColor, allPages, lightbox, editLink, layers, url, ignoreFile,
      params, useOpenParameter) {
    let rawURL = originalCreateLink.apply(this, arguments);
    // Do not include '#' because it's automatically added by getURL function below.
    let documentFragmentIndex = rawURL.indexOf('#');
    let documentFragment = rawURL.substring(documentFragmentIndex + 1);
    if (documentFragment.substring(0, 1) == 'R') {
      let queryString = '';
      let queryStringIndex = rawURL.indexOf('?');
      if (queryStringIndex &gt; -1) {
        queryString = rawURL.substring (queryStringIndex + 1, documentFragmentIndex);
      }
      // Append source parameter to the query
      queryString += '&amp;source=url';
      return window.location.protocol + '//' + window.location.host +
        new XWiki.Document('DiagramViewSheet', 'Diagram').getURL('view', queryString, documentFragment);
    }
    return rawURL;
  }

  return {
    loadUrl: loadUrl
  };
});

/**
  * In case external services are disabled, stop the features that require it (export of pdf from diagram editor
  * or png / jpeg export on IE) and show an info dialog.
  */
define('diagram-external-services', ['jquery', 'diagram-config', 'draw.io'], function($, diagramConfig) {
  var showDisabledServicesDialog = function(editorUi) {
    var errorMessage = $('&lt;div&gt;&lt;/div')
      .html($jsontool.serialize($services.localization.render('diagram.editor.disabledExternalServices')));

    errorMessage.addClass('externalServicesDialog');
    var dlg = new CustomDialog(/*editorUi*/ editorUi, /*content*/ errorMessage[0], /*okFn*/ null, /*cancelFn*/ null,
                               /*okButtonText*/ mxResources.get('ok'), /*helpLink*/ null, /*buttonsContent*/ null,
                               /*hideCancel*/ true);
    editorUi.showDialog(dlg.container, 250, 75, true, true);
  };

  // This is used from File -&gt; Export as.
  var originalCreateDownloadRequest = EditorUi.prototype.createDownloadRequest;
  EditorUi.prototype.createDownloadRequest = function(filename, format, ignoreSelection, base64, transparent,
      currentPage, scale, border, grid, includeXml, pageRange, w, h) {
    if (diagramConfig.disableExternalServices) {
      showDisabledServicesDialog(this);
      return;
    }
    return originalCreateDownloadRequest.apply(this, arguments);
  };

  // This is used from File -&gt; Export as -&gt; Advanced...
  var originalExportFile = ExportDialog.exportFile;
  ExportDialog.exportFile = function(editorUi, name, format, bg, s, b, dpi, grid) {
    if (diagramConfig.disableExternalServices &amp;&amp; (format == 'pdf' ||
        (['png', 'jpg', 'jpeg'].indexOf(format) != -1 &amp;&amp; !editorUi.isExportToCanvas()))) {
      showDisabledServicesDialog(editorUi);
      return;
    }
    return originalExportFile.apply(this, arguments);
  };
});

define('diagramMenuTranslations', {
  prefix: 'diagram.editor.menu.',
  keys: [
    // File menu.
    'print.label',
    'print.title'
  ]
});

/**
 * Integrates draw.io diagram editor in XWiki.
 */
define('diagram-editor', [
  'jquery',
  'diagram-store',
  'diagram-utils',
  'diagram-url-io',
  'diagram-config',
  'xwiki-l10n!diagramMenuTranslations',
  'diagram-graph-xml-filter',
  'diagram-link-editor',
  'diagram-image-editor',
  'diagram-external-services'
], function($, diagramStore, diagramUtils, diagramUrlIO, diagramConfig, l10n) {

  // These variables are used to decide if an image should be uploaded at original resolution or
  // should be declined for being too big.
  // Default values:
  // EditorUi.prototype.maxImageSize = 520;
  // EditorUi.prototype.maxImageBytes = 1000000;

  //
  // Diagram Editor Constructor.
  //
  var createDiagramEditor = function(options) {
    options = options || {};
    // This is needed since we do not use drafts and it would create the file to soon, leading to the file being opened
    // in a new window.
    EditorUi.enableDrafts = false;
    var editor = new Editor(/* chromeless: */ uiTheme === 'min', options.themes, /* model: */ null, /* graph: */ null,
      /* editable: */ true);
    var editorUI = new App(editor, options.container);
    // This is usefull for debugging the diagram editor from the JavaScript console.
    $(editorUI.container).data('diagramEditor', editorUI).trigger('diagramEditorCreated', editorUI);
    // Fix the editor UI before loading the diagram because layout changes can influence the way the shapes are drawn.
    fixEditorUI(editorUI);
    fixLoadUrl(editorUI);
    var file = diagramStore.createFile(editorUI, options.input, options.fileName, options.documentReference);
    // The first letter of the file name is used to determine the storage type. Let's use 'X' for XWiki storage.
    editorUI.loadFile('X' + options.fileName, true, file);
    return editorUI;
  };

  var fixEditorUI = function(editorUI) {
    cleanMenu(editorUI);
    renameMenu(editorUI);
    fixKeyboardShortcutsAction(editorUI);
    fixEditorButtons($(editorUI.container));
    removeThemeButton();
    // These are not present on mobile.
    if (editorUI.menubar != null) {
      removeCompactModeToggle(editorUI);
      fixFullScreenToggle(editorUI);
    }
  };

  var fixLoadUrl = function(editorUI) {
    // Custom diagram import from URL.
    var originalLoadUrl = editorUI.editor.loadUrl;
    editorUI.editor.loadUrl = function(url, success, error, forceBinary, retry, dataUriPrefix, noBinary, headers) {
      var diagramXML = diagramUrlIO.loadUrl(url);
      if (diagramXML != null) {
        return success(diagramXML);
      }
      return originalLoadUrl.apply(this, arguments);
    };
  };

  //
  // Change the service name in order to disable notifications.
  //
  EditorUi.prototype.getServiceName = function()
  {
    return 'xwiki.com';
  };

  // Don't change the document title.
  App.prototype.updateDocumentTitle = function() {};

  //
  // Add support for disabling an entire sub-menu.
  //
  var originalAddSubmenu = Menus.prototype.addSubmenu;
  Menus.prototype.addSubmenu = function(name, menu, parent, label) {
    var subMenu = this.get(name);
    if (subMenu &amp;&amp; subMenu.isEnabled() !== false) {
     return originalAddSubmenu.apply(this, arguments);
    }
  };


  /*
   * Map with all the menu items that we want to have a title.
   */
  const titleMap = new Map([
      ['print', l10n['print.title']]
  ]);

  /*
   * Update the title of the menu items.
   */
  var originalAddMenuItem = Menus.prototype.addMenuItem;
  Menus.prototype.addMenuItem = function(menu, key, parent, trigger, sprite, label) {
    let item = originalAddMenuItem.apply(this, arguments);
    if (item != null &amp;&amp; titleMap.has(key)) {
      item.title = titleMap.get(key);
    }
    return item;
  };

  // Remove the language picker because the diagram editor is configured to use the XWiki language.
  var originalCreateMenubar = Menus.prototype.createMenubar;
  Menus.prototype.createMenubar = function(container) {
    delete this.menus['language'];
    return originalCreateMenubar.apply(this, arguments);
  }

  //
  // Add support for not displaying 'browser' option from 'Import from' sub-menu
  //
  var originalAddItem = mxPopupMenu.prototype.addItem;
  mxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active) {
    if (title === (mxResources.get('browser') + '...') &amp;&amp; parent &amp;&amp; parent.innerText === 'Import from') {
      return null;
    }
    return originalAddItem.apply(this, arguments);
  };

  //
  // Rename menu options to fit our needs.
  //
  var renameMenu = function(editorUI) {
    const menuItems = [
      // File menu
      ['print', l10n['print.label']]
    ];

    // Iterate over the array of tuples
    menuItems.forEach(function([menuKey, newLabel]) {
      var action = editorUI.actions.actions[menuKey];
      if (action) {
        action.label = newLabel;
      }
    });
  };

  //
  // Clean the editor menu by removing the features that are not needed.
  //
  var cleanMenu = function(editorUI) {
    // Disable and hide some of the menu entries.
    [
      // File menu
      'synchronize', 'new', 'open', 'save', 'saveAs', 'rename', 'makeCopy', 'close',
      // Extras menu
      'autosave', 'showStartScreen', 'plugins', 'offline', 'chromeApp',
       // Help menu
      'downloadDesktop', 'useOffline',
      // ExportAs
      'exportHtml', 'exportPdf'
    ].forEach(function(actionName) {
      var action = editorUI.actions.actions[actionName];
      if (action) {
        action.enabled = action.visible = false;
      }
    });

    // Disable and hide some of the sub-menus.
    [
      // File menu
      'openFrom', 'openRecent', 'publish', 'embed',
      // Extras menu
      'theme'
    ].forEach(function(name) {
      var subMenu = editorUI.menus.get(name);
      if (subMenu) {
        subMenu.enabled = subMenu.visible = false;
      }
    });
  };

  //
  // Fix the side bar tool tip: the tool tip position is computed as if the editor takes the full screen.
  //
  var originalGetTooltipOffset = Sidebar.prototype.getTooltipOffset;
  Sidebar.prototype.getTooltipOffset = function(elt, bounds) {
    var fullScreenCoordinates = originalGetTooltipOffset.apply(this, arguments);
    // Adjust the tool tip coordinates with the editor offset.
    var offset = $(this.editorUi.container).offsetParent().offset();
    return new mxPoint(fullScreenCoordinates.x + offset.left, fullScreenCoordinates.y + offset.top);
  };

  //
  // Consider the basePath for the shapes added in the left panel.
  //
  var oldCreateVertexTemplateEntry = Sidebar.prototype.createVertexTemplateEntry;
  Sidebar.prototype.createVertexTemplateEntry = function(style, width, height, value, title, showLabel, showTitle,
      allowCellsInserted, showTooltip, clickFn, thumbWidth, thumbHeight) {
    style = style.replace(/(image=)(img\/lib)/g, '$1' + diagramConfig.drawIOBasePath + '$2');
    return oldCreateVertexTemplateEntry.call(this, style, width, height, value, title, showLabel, showTitle,
      allowCellsInserted, showTooltip, clickFn, thumbWidth, thumbHeight);
  };

  //
  // Overwrite the Keyboard Shortcuts action because it uses the wrong URL.
  //
  var fixKeyboardShortcutsAction = function(editorUI) {
    var keyboardShortcutsAction = editorUI.actions.get('keyboardShortcuts');
    if (keyboardShortcutsAction) {
      var originalFunct = keyboardShortcutsAction.funct;
      keyboardShortcutsAction.funct = function() {
        if (mxClient.IS_SVG) {
          window.open(diagramEditorBasePath + 'shortcuts.svg');
        } else {
          originalFunct.apply(this, arguments);
        }
      };
    }
  };

  //
  // Remove the compact mode toggle and update the position of the remaining buttons.
  //
  var removeCompactModeToggle = function(editorUI) {
    if (typeof editorUI.toggleCompactMode === 'function') {
      editorUI.toggleCompactMode(/* visible: */ false);
      var buttons = $(editorUI.container).find('.geToolbarContainer &gt; a.geButton');
      buttons.last().remove();
      buttons.css('right', function(index, value) {
        return (parseInt(value) - 16) + 'px';
      });
    }
  };

  var fullScreen = new XWiki.widgets.FullScreen();
  var fixFullScreenToggle = function(editorUI) {
    mxEvent.removeAllListeners(editorUI.fullscreenElement);
    editorUI.container._x_fullScreenActivator = editorUI.fullscreenElement;
    $(editorUI.fullscreenElement).click(function(event) {
      event.preventDefault();
      var isFullScreen = $(editorUI.container).parent('.fullScreenWrapper').length &gt; 0;
      if (isFullScreen) {
        // Exit full screen mode.
        fullScreen.closeFullScreen();
        editorUI.refresh();
      } else {
        // Enter full screen mode.
        fullScreen.makeFullScreen(editorUI.container);
        // The previous line hides the 'fullScreenActivator' and shows the 'Exit Full Screen' button. We want to use the
        // 'fullScreenActivator' for exiting the full screen mode. The 'Exit Full Screen' button is hidden from CSS.
        $(editorUI.fullscreenElement).show();
        editorUI.refresh();
      }
    });
  };

  //
  // Add the type of the buttons manually to stop the default submit. The preventDefault used in editDiagram is not
  // working for these since in draw.io code is called stopPropagation.
  //
  var fixEditorButtons = function(editor) {
    editor.find('button:not([type])').each(function() {
      $(this).attr('type', 'button');
    });
  };

  var removeThemeButton = function() {
    $('.geAdaptiveAsset[title="Theme"]').remove();
  };

  // mxRuler adds the ruler to the document body instead of adding it to the editor container.
  var originalMxDualRuler = mxDualRuler;
  mxDualRuler = function(editorUI, unit) {
    originalMxDualRuler.apply(this, arguments);
    $([this.hRuler.container, this.vRuler.container]).appendTo(editorUI.container);
  };
  mxDualRuler.prototype = Object.create(originalMxDualRuler.prototype);
  mxDualRuler.prototype.constructor = mxDualRuler;

  var themes = {};
  var getDiagramEditorConfig = function(container) {
    var input = $(container).children('input.diagram-content');
    var documentReference = input.data('reference') || '';
    if (typeof documentReference === 'string') {
      documentReference = XWiki.Model.resolve(documentReference, XWiki.EntityType.DOCUMENT,
        XWiki.currentDocument.documentReference);
    }
    var fileName = input.data('title') || $('#document-title').text();
    if (!fileName) {
      fileName = documentReference.name == 'WebHome' ? documentReference.parent.name : documentReference.name;
    }
    return {
      container: container,
      themes: themes,
      fileName: fileName,
      input: input,
      documentReference: documentReference
    };
  };

  //
  // jQuery plugin
  //
  $.fn.editDiagram = function(options) {
    return this.on('click', 'button', function(event) {
      // Make sure the buttons from the editor UI don't submit the edit form.
      event.preventDefault();
    }).on('keydown keyup keypress', '.geContentEditable', function(event) {
      // Make sure the keyboard events triggered from the nested editable sections are not propagated as they may
      // trigger shortcut keys (the nested editable sections need to behave like input fields).
      // See issue #15: If you install XWebIDE Application you can't use "W" letter in the diagram text.
      event.stopPropagation();
    }).each(function() {
      // We need this CSS class on the body element in order to have proper styling for the UI elements (menus, dialogs,
      // tooltips) that are added directly under the body element.
      $(document.body).addClass('geEditor');
      createDiagramEditor($.extend(getDiagramEditorConfig(this), options));
      $(this).removeClass('loading');
    });
  };

  return diagramUtils.loadTranslationAndTheme().done(function(theme) {
    // Configure the default editor theme.
    themes[Graph.prototype.defaultThemeName] = theme;
  });
});</code>
    </property>
    <property>
      <name>Diagram Editor</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1787d86a-d14d-400e-94d8-6de104a43cde</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/*!
## Make sure that the version loaded with RequireJS is not a cached one.
#set ($version = $services.extension.installed.getInstalledExtension('com.xwiki.diagram:application-diagram',
  "wiki:$xcontext.database").version.value)
#set ($params = $escapetool.url({
  'minify': $!services.debug.minify,
  'appVersion': $version
}))
#[[*/
// Start JavaScript-only code.
(function(params) {
  "use strict";

require.config({
  paths: {
    'diagram-setup': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', params)
  },
  map: {
    'diagram-utils': {
      'mxgraph-common': 'mxgraph-editor'
    },
    'diagram-link-handler': {
      'draw.io.common': 'draw.io'
    }
  }
});

require(['diagram-setup'], function() {
  require(['jquery', 'diagram-editor'], function($, diagramEditorPromise) {
    diagramEditorPromise.done(function() {
      $('.diagram-editor').editDiagram();
    });
  });
});

// End JavaScript-only code.
}).apply(']]#', $jsontool.serialize([$params]));</code>
    </property>
    <property>
      <name>Startup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
